/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,3],$V1=[23,36,37,40,44,45,46,47,56,103,110,111,112],$V2=[1,20],$V3=[1,9],$V4=[1,10],$V5=[1,12],$V6=[1,15],$V7=[1,16],$V8=[1,17],$V9=[1,18],$Va=[1,19],$Vb=[1,25],$Vc=[1,21],$Vd=[1,22],$Ve=[1,23],$Vf=[9,24],$Vg=[2,53],$Vh=[1,29],$Vi=[1,30],$Vj=[1,46],$Vk=[1,41],$Vl=[1,42],$Vm=[1,43],$Vn=[1,44],$Vo=[1,35],$Vp=[1,36],$Vq=[9,24,44,57],$Vr=[5,9,17,19,21,22,24,25,30,31,32,36,41,44,53,57,58,60,61,62,63,64,66,67,71,73,74,75,76,77,78,79,88,89,92,93,94,96,98,99,101,102,106,107,108,109],$Vs=[1,62],$Vt=[1,57],$Vu=[1,58],$Vv=[1,59],$Vw=[1,60],$Vx=[1,61],$Vy=[5,9,17,19,21,22,24,25,41,53,54,58,60,61,62,63,64],$Vz=[5,17,19,21,22,24,25,30,31,32,41,53,58,60,61,62,63,64,92,106,107,108,109],$VA=[5,17,19,21,22,24,25,30,31,32,41,53,58,60,61,62,63,64,66,67,92,106,107,108,109],$VB=[1,70],$VC=[5,17,19,21,22,24,25,30,31,32,41,53,58,60,61,62,63,64,66,67,71,73,74,75,76,77,78,79,88,89,92,93,94,96,106,107,108,109],$VD=[1,91],$VE=[1,92],$VF=[5,17,19,21,22,24,25,30,31,32,41,53,58,60,61,62,63,64,66,67,71,73,74,75,76,77,78,79,88,89,92,93,94,96,98,99,106,107,108,109],$VG=[1,94],$VH=[1,93],$VI=[1,95],$VJ=[5,17,19,21,22,24,25,30,31,32,36,41,53,58,60,61,62,63,64,66,67,71,73,74,75,76,77,78,79,88,89,92,93,94,96,98,99,101,102,106,107,108,109],$VK=[1,103],$VL=[1,104],$VM=[2,104],$VN=[5,19,21,22,25,41],$VO=[5,17,19,21,22,24,25,41],$VP=[2,56],$VQ=[1,114],$VR=[1,115],$VS=[1,116],$VT=[1,117],$VU=[1,118],$VV=[1,119],$VW=[5,17,19,21,22,24,25,41,53,58,60,61,62,63,64],$VX=[5,17,19,21,22,24,25,41,53,54,58,60,61,62,63,64],$VY=[5,17,19,21,22,24,25,41,44,53,54,57,58,60,61,62,63,64],$VZ=[23,40,44,45,46,47,56,85,86,87,103,110,111,112],$V_=[24,41,92],$V$=[5,21,22,25,41],$V01=[5,22,25,41],$V11=[1,195],$V21=[5,21,22,24,25,41],$V31=[106,107,109],$V41=[5,22,41],$V51=[5,41],$V61=[5,22,24,41],$V71=[5,22,24,32,41];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"main":3,"selectClause":4,"EOF":5,"SELECT":6,"optDistinct":7,"selectExprList":8,"FROM":9,"tableExprList":10,"optWhereClause":11,"optGroupByClause":12,"optHavingClause":13,"optOrderByClause":14,"optLimitClause":15,"DISTINCT":16,"WHERE":17,"expression":18,"GROUP_BY":19,"commaSepExpressionList":20,"HAVING":21,"LIMIT":22,"NUMERIC":23,"COMMA":24,"ORDER_BY":25,"orderByList":26,"orderByListItem":27,"optOrderByOrder":28,"optOrderByNulls":29,"ASC":30,"DESC":31,"NULLS":32,"FIRST":33,"LAST":34,"selectExpr":35,"STAR":36,"QUALIFIED_STAR":37,"selectColumn":38,"optTableExprAlias":39,"LPAREN":40,"RPAREN":41,"value":42,"selectExprColumn":43,"IDENTIFIER":44,"QUALIFIED_IDENTIFIER":45,"MS_IDENTIFIER":46,"MS_QUALIFIED_IDENTIFIER":47,"caseWhen":48,"optFunctionExpressionList":49,"tableExpr":50,"joinComponent":51,"optJoinModifier":52,"JOIN":53,"ON":54,"tableExprPart":55,"STRING":56,"AS":57,"LEFT":58,"OUTER":59,"RIGHT":60,"FULL":61,"INNER":62,"CROSS":63,"NATURAL":64,"condition":65,"LOGICAL_AND":66,"LOGICAL_OR":67,"operand":68,"conditionRightHandSide":69,"EXISTS":70,"LOGICAL_NOT":71,"compare":72,"CMP_EQUALS":73,"CMP_NOTEQUALS":74,"CMP_NOTEQUALS_BASIC":75,"CMP_GREATER":76,"CMP_GREATEROREQUAL":77,"CMP_LESS":78,"CMP_LESSOREQUAL":79,"rhsCompareTest":80,"rhsIsTest":81,"rhsInTest":82,"rhsLikeTest":83,"rhsBetweenTest":84,"ALL":85,"ANY":86,"SOME":87,"IS":88,"IN":89,"functionParam":90,"functionExpressionList":91,";":92,"LIKE":93,"BETWEEN":94,"summand":95,"CONCAT":96,"factor":97,"PLUS":98,"MINUS":99,"term":100,"DIVIDE":101,"MODULO":102,"CASE":103,"caseWhenList":104,"optCaseWhenElse":105,"END":106,"WHEN":107,"THEN":108,"ELSE":109,"PARAMETER":110,"BOOLEAN":111,"NULL":112,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",6:"SELECT",9:"FROM",16:"DISTINCT",17:"WHERE",19:"GROUP_BY",21:"HAVING",22:"LIMIT",23:"NUMERIC",24:"COMMA",25:"ORDER_BY",30:"ASC",31:"DESC",32:"NULLS",33:"FIRST",34:"LAST",36:"STAR",37:"QUALIFIED_STAR",40:"LPAREN",41:"RPAREN",44:"IDENTIFIER",45:"QUALIFIED_IDENTIFIER",46:"MS_IDENTIFIER",47:"MS_QUALIFIED_IDENTIFIER",53:"JOIN",54:"ON",56:"STRING",57:"AS",58:"LEFT",59:"OUTER",60:"RIGHT",61:"FULL",62:"INNER",63:"CROSS",64:"NATURAL",66:"LOGICAL_AND",67:"LOGICAL_OR",70:"EXISTS",71:"LOGICAL_NOT",73:"CMP_EQUALS",74:"CMP_NOTEQUALS",75:"CMP_NOTEQUALS_BASIC",76:"CMP_GREATER",77:"CMP_GREATEROREQUAL",78:"CMP_LESS",79:"CMP_LESSOREQUAL",85:"ALL",86:"ANY",87:"SOME",88:"IS",89:"IN",92:";",93:"LIKE",94:"BETWEEN",96:"CONCAT",98:"PLUS",99:"MINUS",101:"DIVIDE",102:"MODULO",103:"CASE",106:"END",107:"WHEN",108:"THEN",109:"ELSE",110:"PARAMETER",111:"BOOLEAN",112:"NULL"},
productions_: [0,[3,2],[4,10],[7,0],[7,1],[11,0],[11,2],[12,0],[12,2],[13,0],[13,2],[15,0],[15,4],[15,2],[14,0],[14,2],[26,3],[26,1],[27,3],[28,0],[28,1],[28,1],[29,0],[29,2],[29,2],[8,1],[8,3],[35,1],[35,1],[35,2],[35,4],[35,2],[35,2],[38,1],[38,1],[38,1],[38,1],[43,1],[43,3],[43,4],[43,4],[10,1],[10,3],[50,1],[50,4],[50,6],[51,2],[55,1],[55,1],[55,1],[55,1],[55,1],[55,3],[39,0],[39,1],[39,2],[52,0],[52,1],[52,2],[52,1],[52,2],[52,1],[52,1],[52,1],[52,1],[18,1],[18,3],[18,3],[65,1],[65,2],[65,4],[65,2],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[69,1],[69,1],[69,1],[69,1],[69,1],[80,2],[80,5],[80,5],[80,5],[81,2],[81,3],[81,4],[81,5],[82,4],[82,5],[82,4],[82,5],[20,3],[20,1],[90,1],[90,1],[90,1],[91,3],[91,3],[91,1],[49,0],[49,1],[83,2],[83,3],[84,4],[84,5],[68,1],[68,3],[95,1],[95,3],[95,3],[97,1],[97,3],[97,3],[97,3],[100,1],[100,1],[100,1],[100,1],[100,1],[100,1],[100,3],[100,4],[100,4],[48,4],[104,5],[104,4],[105,0],[105,2],[42,1],[42,1],[42,1],[42,1],[42,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return $$[$0-1]; 
break;
case 2:

        this.$ = {
          type: 'select',
          distinct: !!$$[$0-9],
          columns: $$[$0-7],
          from: $$[$0-5],
          where:$$[$0-4],
          group:$$[$0-3],
          having:$$[$0-2],
          order:$$[$0-1],
          limit: $$[$0]
        };
      
break;
case 3: case 21:
 this.$ = false; 
break;
case 4: case 19: case 20:
 this.$ = true; 
break;
case 5: case 7: case 9: case 11: case 14: case 53: case 104: case 131:
 this.$ = null; 
break;
case 6: case 8: case 10: case 15: case 33: case 34: case 37: case 47: case 48: case 54: case 55: case 68: case 79: case 80: case 81: case 82: case 83: case 98: case 99: case 100: case 105: case 110: case 112: case 115: case 119: case 124: case 132:
 this.$ = $$[$0]; 
break;
case 12:
 this.$ = [parseInt($$[$0-2]), parseInt($$[$0])]; 
break;
case 13:
 this.$ = [0, parseInt($$[$0])]; 
break;
case 16: case 26: case 42: case 96: case 101:
 this.$ = $$[$0-2]; $$[$0-2].push($$[$0]); 
break;
case 17: case 25: case 41: case 97: case 103:
 this.$ = [$$[$0]]; 
break;
case 18:
 this.$ = {expr:$$[$0-2], orderAsc: $$[$0-1], orderByNulls: $$[$0]}; 
break;
case 22:
 this.$ = '';
break;
case 23:
 this.$ = 'NULLS FIRST'; 
break;
case 24:
 this.$ = 'NULLS LAST'; 
break;
case 27:
 this.$ = {type: 'column', value:'*'}; 
break;
case 28:
 this.$ = {type: 'column', value:$$[$0]}; 
break;
case 29:
 this.$ = {type: 'column', value:$$[$0-1], alias:$$[$0]}; 
break;
case 30:
 this.$ = {type: 'query', value:$$[$0-2], alias:$$[$0] }; 
break;
case 31:
 this.$ = {type: 'static', value:$$[$0-1], alias:$$[$0]}; 
break;
case 32:
 this.$ = {type: 'expr', value:$$[$0-1], alias:$$[$0]}; 
break;
case 35: case 36: case 49: case 50: case 51:
 this.$ = $$[$0].substring(1, $$[$0].length - 1); 
break;
case 38: case 52: case 125:
 this.$ = $$[$0-1]; 
break;
case 39: case 40: case 126: case 127:
 this.$ = {type: 'call', name: $$[$0-3], args: $$[$0-1]}; 
break;
case 43:
 this.$ = {type:'table', value: $$[$0], join: []}; 
break;
case 44:
 this.$ = $$[$0-3]; $$[$0-3].join.push({type:'table', value: $$[$0], modifier:$$[$0-2]}); 
break;
case 45:
 this.$ = $$[$0-5]; $$[$0-5].join.push({type:'table', value: $$[$0-2], modifier:$$[$0-4], expr:$$[$0]}); 
break;
case 46:
 this.$ = {name: $$[$0-1], alias: $$[$0]}; 
break;
case 56:
 this.$ = ''; 
break;
case 57:
 this.$ = 'LEFT'; 
break;
case 58:
 this.$ = 'LEFT OUTER'; 
break;
case 59:
 this.$ = 'RIGHT'; 
break;
case 60:
 this.$ = 'RIGHT OUTER'; 
break;
case 61:
 this.$ = 'FULL'; 
break;
case 62:
 this.$ = 'INNER'; 
break;
case 63:
 this.$ = 'CROSS'; 
break;
case 64:
 this.$ = 'NATURAL'; 
break;
case 65:
 this.$ = { condition:'AND', rules: [$$[$0]]}; 
break;
case 66:

      if($$[$0].condition === 'AND') {
        $$[$0].rules.unshift($$[$0-2]);
        $$[$0-2] = $$[$0].rules;
      } else {
        if ($$[$0].rules.length === 1) $$[$0] = $$[$0].rules[0];
        $$[$0-2] = [$$[$0-2], $$[$0]];
      }
      this.$ = { condition: 'AND', rules: $$[$0-2] };
    
break;
case 67:

      if ($$[$0].condition === 'OR') {
        $$[$0].rules.unshift($$[$0-2]);
        $$[$0-2] = $$[$0].rules;
      } else {
        if ($$[$0].rules.length === 1) $$[$0] = $$[$0].rules[0];
        $$[$0-2] = [$$[$0-2], $$[$0]];
      }
      this.$ = { condition: 'OR', rules: $$[$0-2] };
    
break;
case 69:

      if ($$[$0-1].type === 'Term' && $$[$0-1].value) {
        $$[$0-1] = $$[$0-1].value;
      }
      if ($$[$0].value && $$[$0].value.type && $$[$0].value.value) {
        $$[$0].value = $$[$0].value.value;
      }
      if ($$[$0].type === 'RhsIs') {
        if (!$$[$0].value || $$[$0].value.type == 'null') {
          this.$ = { operator: $$[$0].not ? 'is_not_null' : 'is_null', id: $$[$0-1] };
        } else {
          this.$ = { operator: $$[$0].not ? 'is_not' : 'is', id: $$[$0-1], value: $$[$0].value };
        }
      } else if ($$[$0].type === 'RhsLike') {
        if ($$[$0].value[0] === '%') {
          this.$ = { operator: $$[$0].not ? 'not_ends_with' : 'ends_with', id: $$[$0-1], value: $$[$0].value };
        } else if ($$[$0].value.substring(-1) === '%') {
          this.$ = { operator: $$[$0].not ? 'not_begins_with' : 'begins_with', id: $$[$0-1], value: $$[$0].value };
        } else {
          this.$ = { operator: $$[$0].not ? 'not_contains' : 'contains', id: $$[$0-1], value: $$[$0].value };
        }
      } else if ($$[$0].type === 'RhsBetween') {
        if ($$[$0].left.type && $$[$0].left.value) {
          $$[$0].left = $$[$0].left.value;
        }
        if ($$[$0].right.type && $$[$0].right.value) {
          $$[$0].right = $$[$0].right.value;
        }
        this.$ = { operator: $$[$0].not ? 'not_between' : 'between', id: $$[$0-1], value: [$$[$0].left, $$[$0].right] };
      } else if ($$[$0].type === 'RhsInExpressionList') {
        this.$ = { operator: $$[$0].not ? 'not_in' : 'in', id: $$[$0-1], value: $$[$0].value };
      } else if ($$[$0].op) {
        this.$ = { operator: $$[$0].op, id: $$[$0-1], value: $$[$0].value };
      } else {
        this.$ = { type: 'BinaryCondition', left: $$[$0-1], right: $$[$0] };
      }
    
break;
case 70:
 this.$ = {type: 'ExistsCondition', value: $$[$0-1]}; 
break;
case 71:
 this.$ = {type: 'NotCondition', value: $$[$0]}; 
break;
case 72:
 this.$ = 'equal'; 
break;
case 73: case 74:
 this.$ = 'not_equal'; 
break;
case 75:
 this.$ = 'greater'; 
break;
case 76:
 this.$ = 'greater_or_equal'; 
break;
case 77:
 this.$ = 'less'; 
break;
case 78:
 this.$ = 'less_or_equal'; 
break;
case 84:
 this.$ = {type: 'RhsCompare', op: $$[$0-1], value: $$[$0] }; 
break;
case 85: case 86: case 87:
 this.$ = {type: 'RhsCompareSub', op:$$[$0-4], kind: $$[$0-3], value: $$[$0-1] }; 
break;
case 88:
 this.$ = {type: 'RhsIs', value: $$[$0]}; 
break;
case 89:
 this.$ = {type: 'RhsIs', value: $$[$0], not:1}; 
break;
case 90:
 this.$ = {type: 'RhsIs', value: $$[$0], distinctFrom:1}; 
break;
case 91:
 this.$ = {type: 'RhsIs', value: $$[$0], not:1, distinctFrom:1}; 
break;
case 92:
 this.$ = { type: 'RhsInSelect', value: $$[$0-1] }; 
break;
case 93:
 this.$ = { type: 'RhsInSelect', value: $$[$0-1], not:1 }; 
break;
case 94:
 this.$ = { type: 'RhsInExpressionList', value: $$[$0-1] }; 
break;
case 95:
 this.$ = { type: 'RhsInExpressionList', value: $$[$0-1], not:1 }; 
break;
case 102:
 this.$ = $$[$0-2]; $$[$0-2].push($$[$0]);  
break;
case 106:
 this.$ = {type: 'RhsLike', value: $$[$0]}; 
break;
case 107:
 this.$ = {type: 'RhsLike', value: $$[$0], not:1}; 
break;
case 108:
 this.$ = {type: 'RhsBetween', left: $$[$0-2], right: $$[$0]}; 
break;
case 109:
 this.$ = {type: 'RhsBetween', left: $$[$0-2], right: $$[$0], not:1}; 
break;
case 111:
 this.$ = {type:'Operand', left:$$[$0-2], right:$$[$0], op:$$[$0-1]}; 
break;
case 113: case 114:
 this.$ = {type:'Summand', left:$$[$0-2], right:$$[$0], op:$$[$0-1]}; 
break;
case 116: case 117: case 118:
 this.$ = {type:'Factor', left:$$[$0-2], right:$$[$0], op:$$[$0-1]}; 
break;
case 120: case 121:
 this.$ = {type: 'Term', value: $$[$0]}; 
break;
case 122: case 123:
 this.$ = {type: 'Term', value: $$[$0].substring(1, $$[$0].length - 1)}; 
break;
case 128:
 this.$ = {type:'case', clauses: $$[$0-2], else: $$[$0-1]}; 
break;
case 129:
 this.$ = $$[$0-4]; $$[$0-4].push({when: $$[$0-2], then: $$[$0]}); 
break;
case 130:
 this.$ = [{when: $$[$0-2], then: $$[$0]}]; 
break;
case 133:
 this.$ = {type: 'string', value: $$[$0]}; 
break;
case 134:
 this.$ = {type: 'number', value: $$[$0]}; 
break;
case 135:
 this.$ = {type: 'param', name: $$[$0].substring(1)}; 
break;
case 136:
 this.$ = {type: 'boolean', value: $$[$0]}; 
break;
case 137:
 this.$ = {type: 'null'}; 
break;
}
},
table: [{3:1,4:2,6:$V0},{1:[3]},{5:[1,4]},o($V1,[2,3],{7:5,16:[1,6]}),{1:[2,1]},{8:7,23:$V2,35:8,36:$V3,37:$V4,38:11,40:$V5,42:13,43:14,44:$V6,45:$V7,46:$V8,47:$V9,48:24,56:$Va,103:$Vb,110:$Vc,111:$Vd,112:$Ve},o($V1,[2,4]),{9:[1,26],24:[1,27]},o($Vf,[2,25]),o($Vf,[2,27]),o($Vf,[2,28]),o($Vf,$Vg,{39:28,44:$Vh,57:$Vi}),{4:31,6:$V0,18:32,23:$V2,40:$Vj,42:40,44:$Vk,45:$Vl,46:$Vm,47:$Vn,48:45,56:$Va,65:33,68:34,70:$Vo,71:$Vp,95:37,97:38,100:39,103:$Vb,110:$Vc,111:$Vd,112:$Ve},o($Vf,$Vg,{39:47,44:$Vh,57:$Vi}),o($Vf,$Vg,{39:48,44:$Vh,57:$Vi}),o($Vq,[2,33],{40:[1,49]}),o($Vq,[2,34],{40:[1,50]}),o($Vq,[2,35]),o($Vq,[2,36]),o($Vr,[2,133]),o($Vr,[2,134]),o($Vr,[2,135]),o($Vr,[2,136]),o($Vr,[2,137]),o($Vq,[2,37]),{104:51,107:[1,52]},{10:53,40:$Vs,44:$Vt,45:$Vu,46:$Vv,47:$Vw,50:54,51:55,55:56,56:$Vx},{23:$V2,35:63,36:$V3,37:$V4,38:11,40:$V5,42:13,43:14,44:$V6,45:$V7,46:$V8,47:$V9,48:24,56:$Va,103:$Vb,110:$Vc,111:$Vd,112:$Ve},o($Vf,[2,29]),o($Vy,[2,54]),{44:[1,64]},{41:[1,65]},{41:[1,66]},o($Vz,[2,65],{66:[1,67],67:[1,68]}),o($VA,[2,68],{69:69,80:71,81:72,82:73,83:74,84:75,72:76,71:[1,79],73:[1,82],74:[1,83],75:[1,84],76:[1,85],77:[1,86],78:[1,87],79:[1,88],88:[1,77],89:[1,78],93:[1,80],94:[1,81],96:$VB}),{40:[1,89]},{23:$V2,40:$Vj,42:40,44:$Vk,45:$Vl,46:$Vm,47:$Vn,48:45,56:$Va,65:90,68:34,70:$Vo,71:$Vp,95:37,97:38,100:39,103:$Vb,110:$Vc,111:$Vd,112:$Ve},o($VC,[2,110],{98:$VD,99:$VE}),o($VF,[2,112],{36:$VG,101:$VH,102:$VI}),o($VJ,[2,115]),o($VJ,[2,119]),o($VJ,[2,120],{40:[1,96]}),o($VJ,[2,121],{40:[1,97]}),o($VJ,[2,122]),o($VJ,[2,123]),o($VJ,[2,124]),{18:98,23:$V2,40:$Vj,42:40,44:$Vk,45:$Vl,46:$Vm,47:$Vn,48:45,56:$Va,65:33,68:34,70:$Vo,71:$Vp,95:37,97:38,100:39,103:$Vb,110:$Vc,111:$Vd,112:$Ve},o($Vf,[2,31]),o($Vf,[2,32]),{18:102,23:$V2,36:$VK,37:$VL,40:$Vj,41:$VM,42:40,44:$Vk,45:$Vl,46:$Vm,47:$Vn,48:45,49:99,56:$Va,65:33,68:34,70:$Vo,71:$Vp,90:101,91:100,95:37,97:38,100:39,103:$Vb,110:$Vc,111:$Vd,112:$Ve},{18:102,23:$V2,36:$VK,37:$VL,40:$Vj,41:$VM,42:40,44:$Vk,45:$Vl,46:$Vm,47:$Vn,48:45,49:105,56:$Va,65:33,68:34,70:$Vo,71:$Vp,90:101,91:100,95:37,97:38,100:39,103:$Vb,110:$Vc,111:$Vd,112:$Ve},{105:106,106:[2,131],107:[1,107],109:[1,108]},{18:109,23:$V2,40:$Vj,42:40,44:$Vk,45:$Vl,46:$Vm,47:$Vn,48:45,56:$Va,65:33,68:34,70:$Vo,71:$Vp,95:37,97:38,100:39,103:$Vb,110:$Vc,111:$Vd,112:$Ve},o($VN,[2,5],{11:110,17:[1,112],24:[1,111]}),o($VO,[2,41],{52:113,53:$VP,58:$VQ,60:$VR,61:$VS,62:$VT,63:$VU,64:$VV}),o($VW,[2,43]),o($VX,$Vg,{39:120,44:$Vh,57:$Vi}),o($VY,[2,47]),o($VY,[2,48]),o($VY,[2,49]),o($VY,[2,50]),o($VY,[2,51]),{4:121,6:$V0},o($Vf,[2,26]),o($Vy,[2,55]),o($Vf,$Vg,{39:122,44:$Vh,57:$Vi}),o($Vq,[2,38]),{18:123,23:$V2,40:$Vj,42:40,44:$Vk,45:$Vl,46:$Vm,47:$Vn,48:45,56:$Va,65:33,68:34,70:$Vo,71:$Vp,95:37,97:38,100:39,103:$Vb,110:$Vc,111:$Vd,112:$Ve},{18:124,23:$V2,40:$Vj,42:40,44:$Vk,45:$Vl,46:$Vm,47:$Vn,48:45,56:$Va,65:33,68:34,70:$Vo,71:$Vp,95:37,97:38,100:39,103:$Vb,110:$Vc,111:$Vd,112:$Ve},o($VA,[2,69]),{23:$V2,40:$Vj,42:40,44:$Vk,45:$Vl,46:$Vm,47:$Vn,48:45,56:$Va,95:125,97:38,100:39,103:$Vb,110:$Vc,111:$Vd,112:$Ve},o($VA,[2,79]),o($VA,[2,80]),o($VA,[2,81]),o($VA,[2,82]),o($VA,[2,83]),{23:$V2,40:$Vj,42:40,44:$Vk,45:$Vl,46:$Vm,47:$Vn,48:45,56:$Va,68:126,85:[1,127],86:[1,128],87:[1,129],95:37,97:38,100:39,103:$Vb,110:$Vc,111:$Vd,112:$Ve},{16:[1,132],23:$V2,40:$Vj,42:40,44:$Vk,45:$Vl,46:$Vm,47:$Vn,48:45,56:$Va,68:130,71:[1,131],95:37,97:38,100:39,103:$Vb,110:$Vc,111:$Vd,112:$Ve},{40:[1,133]},{89:[1,134],93:[1,135],94:[1,136]},{23:$V2,40:$Vj,42:40,44:$Vk,45:$Vl,46:$Vm,47:$Vn,48:45,56:$Va,68:137,95:37,97:38,100:39,103:$Vb,110:$Vc,111:$Vd,112:$Ve},{23:$V2,40:$Vj,42:40,44:$Vk,45:$Vl,46:$Vm,47:$Vn,48:45,56:$Va,68:138,95:37,97:38,100:39,103:$Vb,110:$Vc,111:$Vd,112:$Ve},o($VZ,[2,72]),o($VZ,[2,73]),o($VZ,[2,74]),o($VZ,[2,75]),o($VZ,[2,76]),o($VZ,[2,77]),o($VZ,[2,78]),{4:139,6:$V0},o($VA,[2,71]),{23:$V2,40:$Vj,42:40,44:$Vk,45:$Vl,46:$Vm,47:$Vn,48:45,56:$Va,97:140,100:39,103:$Vb,110:$Vc,111:$Vd,112:$Ve},{23:$V2,40:$Vj,42:40,44:$Vk,45:$Vl,46:$Vm,47:$Vn,48:45,56:$Va,97:141,100:39,103:$Vb,110:$Vc,111:$Vd,112:$Ve},{23:$V2,40:$Vj,42:40,44:$Vk,45:$Vl,46:$Vm,47:$Vn,48:45,56:$Va,100:142,103:$Vb,110:$Vc,111:$Vd,112:$Ve},{23:$V2,40:$Vj,42:40,44:$Vk,45:$Vl,46:$Vm,47:$Vn,48:45,56:$Va,100:143,103:$Vb,110:$Vc,111:$Vd,112:$Ve},{23:$V2,40:$Vj,42:40,44:$Vk,45:$Vl,46:$Vm,47:$Vn,48:45,56:$Va,100:144,103:$Vb,110:$Vc,111:$Vd,112:$Ve},{18:102,23:$V2,36:$VK,37:$VL,40:$Vj,41:$VM,42:40,44:$Vk,45:$Vl,46:$Vm,47:$Vn,48:45,49:145,56:$Va,65:33,68:34,70:$Vo,71:$Vp,90:101,91:100,95:37,97:38,100:39,103:$Vb,110:$Vc,111:$Vd,112:$Ve},{18:102,23:$V2,36:$VK,37:$VL,40:$Vj,41:$VM,42:40,44:$Vk,45:$Vl,46:$Vm,47:$Vn,48:45,49:146,56:$Va,65:33,68:34,70:$Vo,71:$Vp,90:101,91:100,95:37,97:38,100:39,103:$Vb,110:$Vc,111:$Vd,112:$Ve},{41:[1,147]},{41:[1,148]},{24:[1,149],41:[2,105],92:[1,150]},o($V_,[2,103]),o($V_,[2,98]),o($V_,[2,99]),o($V_,[2,100]),{41:[1,151]},{106:[1,152]},{18:153,23:$V2,40:$Vj,42:40,44:$Vk,45:$Vl,46:$Vm,47:$Vn,48:45,56:$Va,65:33,68:34,70:$Vo,71:$Vp,95:37,97:38,100:39,103:$Vb,110:$Vc,111:$Vd,112:$Ve},{18:154,23:$V2,40:$Vj,42:40,44:$Vk,45:$Vl,46:$Vm,47:$Vn,48:45,56:$Va,65:33,68:34,70:$Vo,71:$Vp,95:37,97:38,100:39,103:$Vb,110:$Vc,111:$Vd,112:$Ve},{108:[1,155]},o($V$,[2,7],{12:156,19:[1,157]}),{40:$Vs,44:$Vt,45:$Vu,46:$Vv,47:$Vw,50:158,51:55,55:56,56:$Vx},{18:159,23:$V2,40:$Vj,42:40,44:$Vk,45:$Vl,46:$Vm,47:$Vn,48:45,56:$Va,65:33,68:34,70:$Vo,71:$Vp,95:37,97:38,100:39,103:$Vb,110:$Vc,111:$Vd,112:$Ve},{53:[1,160]},{53:[2,57],59:[1,161]},{53:[2,59],59:[1,162]},{53:[2,61]},{53:[2,62]},{53:[2,63]},{53:[2,64]},o($VX,[2,46]),{41:[1,163]},o($Vf,[2,30]),o($Vz,[2,66]),o($Vz,[2,67]),o($VC,[2,111],{98:$VD,99:$VE}),o($VA,[2,84],{96:$VB}),{40:[1,164]},{40:[1,165]},{40:[1,166]},o($VA,[2,88],{96:$VB}),{16:[1,168],23:$V2,40:$Vj,42:40,44:$Vk,45:$Vl,46:$Vm,47:$Vn,48:45,56:$Va,68:167,95:37,97:38,100:39,103:$Vb,110:$Vc,111:$Vd,112:$Ve},{9:[1,169]},{4:170,6:$V0,18:172,20:171,23:$V2,40:$Vj,42:40,44:$Vk,45:$Vl,46:$Vm,47:$Vn,48:45,56:$Va,65:33,68:34,70:$Vo,71:$Vp,95:37,97:38,100:39,103:$Vb,110:$Vc,111:$Vd,112:$Ve},{40:[1,173]},{23:$V2,40:$Vj,42:40,44:$Vk,45:$Vl,46:$Vm,47:$Vn,48:45,56:$Va,68:174,95:37,97:38,100:39,103:$Vb,110:$Vc,111:$Vd,112:$Ve},{23:$V2,40:$Vj,42:40,44:$Vk,45:$Vl,46:$Vm,47:$Vn,48:45,56:$Va,68:175,95:37,97:38,100:39,103:$Vb,110:$Vc,111:$Vd,112:$Ve},o($VA,[2,106],{96:$VB}),{66:[1,176],96:$VB},{41:[1,177]},o($VF,[2,113],{36:$VG,101:$VH,102:$VI}),o($VF,[2,114],{36:$VG,101:$VH,102:$VI}),o($VJ,[2,116]),o($VJ,[2,117]),o($VJ,[2,118]),{41:[1,178]},{41:[1,179]},o($VJ,[2,125]),o($Vq,[2,39]),{18:102,23:$V2,36:$VK,37:$VL,40:$Vj,42:40,44:$Vk,45:$Vl,46:$Vm,47:$Vn,48:45,56:$Va,65:33,68:34,70:$Vo,71:$Vp,90:180,95:37,97:38,100:39,103:$Vb,110:$Vc,111:$Vd,112:$Ve},{18:102,23:$V2,36:$VK,37:$VL,40:$Vj,42:40,44:$Vk,45:$Vl,46:$Vm,47:$Vn,48:45,56:$Va,65:33,68:34,70:$Vo,71:$Vp,90:181,95:37,97:38,100:39,103:$Vb,110:$Vc,111:$Vd,112:$Ve},o($Vq,[2,40]),o($Vr,[2,128]),{108:[1,182]},{106:[2,132]},{18:183,23:$V2,40:$Vj,42:40,44:$Vk,45:$Vl,46:$Vm,47:$Vn,48:45,56:$Va,65:33,68:34,70:$Vo,71:$Vp,95:37,97:38,100:39,103:$Vb,110:$Vc,111:$Vd,112:$Ve},o($V01,[2,9],{13:184,21:[1,185]}),{18:172,20:186,23:$V2,40:$Vj,42:40,44:$Vk,45:$Vl,46:$Vm,47:$Vn,48:45,56:$Va,65:33,68:34,70:$Vo,71:$Vp,95:37,97:38,100:39,103:$Vb,110:$Vc,111:$Vd,112:$Ve},o($VO,[2,42],{52:113,53:$VP,58:$VQ,60:$VR,61:$VS,62:$VT,63:$VU,64:$VV}),o($VN,[2,6]),{40:$Vs,44:$Vt,45:$Vu,46:$Vv,47:$Vw,51:187,55:56,56:$Vx},{53:[2,58]},{53:[2,60]},o($VY,[2,52]),{4:188,6:$V0},{4:189,6:$V0},{4:190,6:$V0},o($VA,[2,89],{96:$VB}),{9:[1,191]},{23:$V2,40:$Vj,42:40,44:$Vk,45:$Vl,46:$Vm,47:$Vn,48:45,56:$Va,68:192,95:37,97:38,100:39,103:$Vb,110:$Vc,111:$Vd,112:$Ve},{41:[1,193]},{24:$V11,41:[1,194]},o($V21,[2,97]),{4:196,6:$V0,18:172,20:197,23:$V2,40:$Vj,42:40,44:$Vk,45:$Vl,46:$Vm,47:$Vn,48:45,56:$Va,65:33,68:34,70:$Vo,71:$Vp,95:37,97:38,100:39,103:$Vb,110:$Vc,111:$Vd,112:$Ve},o($VA,[2,107],{96:$VB}),{66:[1,198],96:$VB},{23:$V2,40:$Vj,42:40,44:$Vk,45:$Vl,46:$Vm,47:$Vn,48:45,56:$Va,68:199,95:37,97:38,100:39,103:$Vb,110:$Vc,111:$Vd,112:$Ve},o($VA,[2,70]),o($VJ,[2,126]),o($VJ,[2,127]),o($V_,[2,101]),o($V_,[2,102]),{18:200,23:$V2,40:$Vj,42:40,44:$Vk,45:$Vl,46:$Vm,47:$Vn,48:45,56:$Va,65:33,68:34,70:$Vo,71:$Vp,95:37,97:38,100:39,103:$Vb,110:$Vc,111:$Vd,112:$Ve},o($V31,[2,130]),o($V41,[2,14],{14:201,25:[1,202]}),{18:203,23:$V2,40:$Vj,42:40,44:$Vk,45:$Vl,46:$Vm,47:$Vn,48:45,56:$Va,65:33,68:34,70:$Vo,71:$Vp,95:37,97:38,100:39,103:$Vb,110:$Vc,111:$Vd,112:$Ve},o($V$,[2,8],{24:$V11}),o($VW,[2,44],{54:[1,204]}),{41:[1,205]},{41:[1,206]},{41:[1,207]},{23:$V2,40:$Vj,42:40,44:$Vk,45:$Vl,46:$Vm,47:$Vn,48:45,56:$Va,68:208,95:37,97:38,100:39,103:$Vb,110:$Vc,111:$Vd,112:$Ve},o($VA,[2,90],{96:$VB}),o($VA,[2,92]),o($VA,[2,94]),{18:209,23:$V2,40:$Vj,42:40,44:$Vk,45:$Vl,46:$Vm,47:$Vn,48:45,56:$Va,65:33,68:34,70:$Vo,71:$Vp,95:37,97:38,100:39,103:$Vb,110:$Vc,111:$Vd,112:$Ve},{41:[1,210]},{24:$V11,41:[1,211]},{23:$V2,40:$Vj,42:40,44:$Vk,45:$Vl,46:$Vm,47:$Vn,48:45,56:$Va,68:212,95:37,97:38,100:39,103:$Vb,110:$Vc,111:$Vd,112:$Ve},o($VA,[2,108],{96:$VB}),o($V31,[2,129]),o($V51,[2,11],{15:213,22:[1,214]}),{18:217,23:$V2,26:215,27:216,40:$Vj,42:40,44:$Vk,45:$Vl,46:$Vm,47:$Vn,48:45,56:$Va,65:33,68:34,70:$Vo,71:$Vp,95:37,97:38,100:39,103:$Vb,110:$Vc,111:$Vd,112:$Ve},o($V01,[2,10]),{18:218,23:$V2,40:$Vj,42:40,44:$Vk,45:$Vl,46:$Vm,47:$Vn,48:45,56:$Va,65:33,68:34,70:$Vo,71:$Vp,95:37,97:38,100:39,103:$Vb,110:$Vc,111:$Vd,112:$Ve},o($VA,[2,85]),o($VA,[2,86]),o($VA,[2,87]),o($VA,[2,91],{96:$VB}),o($V21,[2,96]),o($VA,[2,93]),o($VA,[2,95]),o($VA,[2,109],{96:$VB}),o($V51,[2,2]),{23:[1,219]},o($V41,[2,15],{24:[1,220]}),o($V61,[2,17]),o($V71,[2,19],{28:221,30:[1,222],31:[1,223]}),o($VW,[2,45]),o($V51,[2,13],{24:[1,224]}),{18:217,23:$V2,27:225,40:$Vj,42:40,44:$Vk,45:$Vl,46:$Vm,47:$Vn,48:45,56:$Va,65:33,68:34,70:$Vo,71:$Vp,95:37,97:38,100:39,103:$Vb,110:$Vc,111:$Vd,112:$Ve},o($V61,[2,22],{29:226,32:[1,227]}),o($V71,[2,20]),o($V71,[2,21]),{23:[1,228]},o($V61,[2,16]),o($V61,[2,18]),{33:[1,229],34:[1,230]},o($V51,[2,12]),o($V61,[2,23]),o($V61,[2,24])],
defaultActions: {4:[2,1],116:[2,61],117:[2,62],118:[2,63],119:[2,64],154:[2,132],161:[2,58],162:[2,60]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 45
break;
case 1:return 47
break;
case 2:return 37
break;
case 3:/* skip whitespace */
break;
case 4:return 6
break;
case 5:return 9
break;
case 6:return 17
break;
case 7:return 16
break;
case 8:return 94
break;
case 9:return 19
break;
case 10:return 21
break;
case 11:return 22
break;
case 12:return 25
break;
case 13:return 24
break;
case 14:return 98
break;
case 15:return 99
break;
case 16:return 101
break;
case 17:return 36
break;
case 18:return 102
break;
case 19:return 73
break;
case 20:return 74
break;
case 21:return 75
break;
case 22:return 77
break;
case 23:return 76
break;
case 24:return 79
break;
case 25:return 78
break;
case 26:return 40
break;
case 27:return 41
break;
case 28:return 96
break;
case 29:return 57
break;
case 30:return 85
break;
case 31:return 86
break;
case 32:return 87
break;
case 33:return 70
break;
case 34:return 88
break;
case 35:return 89
break;
case 36:return 54
break;
case 37:return 66
break;
case 38:return 67
break;
case 39:return 71
break;
case 40:return 62
break;
case 41:return 59
break;
case 42:return 53
break;
case 43:return 58
break;
case 44:return 60
break;
case 45:return 61
break;
case 46:return 64
break;
case 47:return 63
break;
case 48:return 103
break;
case 49:return 107
break;
case 50:return 108
break;
case 51:return 109
break;
case 52:return 106
break;
case 53:return 93
break;
case 54:return 30
break;
case 55:return 31
break;
case 56:return 32
break;
case 57:return 33
break;
case 58:return 34
break;
case 59:return 56
break;
case 60:return 112
break;
case 61:return 111
break;
case 62:return 110
break;
case 63:return 23
break;
case 64:return 44
break;
case 65:return 46
break;
case 66:return 5
break;
case 67:return 'INVALID'
break;
}
},
rules: [/^(?:[a-zA-Z_][a-zA-Z0-9_]*\.[a-zA-Z_][a-zA-Z0-9_]*)/i,/^(?:\[[a-zA-Z_][a-zA-Z0-9_]*\]\.\[[a-zA-Z_][a-zA-Z0-9_]*\])/i,/^(?:[a-zA-Z_][a-zA-Z0-9_]*\.\*)/i,/^(?:\s+)/i,/^(?:SELECT\b)/i,/^(?:FROM\b)/i,/^(?:WHERE\b)/i,/^(?:DISTINCT\b)/i,/^(?:BETWEEN\b)/i,/^(?:GROUP BY\b)/i,/^(?:HAVING\b)/i,/^(?:LIMIT\b)/i,/^(?:ORDER BY\b)/i,/^(?:,)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\/)/i,/^(?:\*)/i,/^(?:%)/i,/^(?:=)/i,/^(?:!=)/i,/^(?:<>)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\|\|)/i,/^(?:AS\b)/i,/^(?:ALL\b)/i,/^(?:ANY\b)/i,/^(?:SOME\b)/i,/^(?:EXISTS\b)/i,/^(?:IS\b)/i,/^(?:IN\b)/i,/^(?:ON\b)/i,/^(?:AND\b)/i,/^(?:OR\b)/i,/^(?:NOT\b)/i,/^(?:INNER\b)/i,/^(?:OUTER\b)/i,/^(?:JOIN\b)/i,/^(?:LEFT\b)/i,/^(?:RIGHT\b)/i,/^(?:FULL\b)/i,/^(?:NATURAL\b)/i,/^(?:CROSS\b)/i,/^(?:CASE\b)/i,/^(?:WHEN\b)/i,/^(?:THEN\b)/i,/^(?:ELSE\b)/i,/^(?:END\b)/i,/^(?:LIKE\b)/i,/^(?:ASC\b)/i,/^(?:DESC\b)/i,/^(?:NULLS\b)/i,/^(?:FIRST\b)/i,/^(?:LAST\b)/i,/^(?:['](\\.|[^'])*['])/i,/^(?:NULL\b)/i,/^(?:(true|false))/i,/^(?::[a-zA-Z_][a-zA-Z0-9_]*)/i,/^(?:[0-9]+(\.[0-9]+)?)/i,/^(?:[a-zA-Z_][a-zA-Z0-9_]*)/i,/^(?:\[[a-zA-Z_][^\]]*\])/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}
// browser support
if (typeof window !== 'undefined') {
  window.escuelle = parser.parse.bind(parser);
}
