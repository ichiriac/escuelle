/* parser generated by jison 0.4.15 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,3],$V1=[33,34,42,43,44,60,61,95,102,103,104,105,106],$V2=[1,9],$V3=[1,10],$V4=[1,21],$V5=[1,22],$V6=[1,24],$V7=[1,15],$V8=[1,16],$V9=[1,30],$Va=[1,25],$Vb=[1,26],$Vc=[1,27],$Vd=[1,28],$Ve=[1,29],$Vf=[9,23],$Vg=[2,36],$Vh=[1,35],$Vi=[1,36],$Vj=[1,34],$Vk=[5,9,16,18,20,21,23,27,28,29,39,42,45,46,47,49,50,51,52,53,55,98,99,100,101],$Vl=[1,37],$Vm=[5,9,16,18,20,21,23,27,28,29,39,42,45,46,47,49,50,51,52,53,55,57,98,99,100,101],$Vn=[1,39],$Vo=[5,9,16,18,20,21,23,27,28,29,39,42,45,46,47,49,50,51,52,53,55,57,61,63,64,65,66,67,68,69,78,79,83,84,86,98,99,100,101],$Vp=[1,60],$Vq=[1,61],$Vr=[5,9,16,18,20,21,23,27,28,29,39,42,45,46,47,49,50,51,52,53,55,57,61,63,64,65,66,67,68,69,78,79,83,84,86,88,89,98,99,100,101],$Vs=[1,63],$Vt=[1,62],$Vu=[1,64],$Vv=[5,9,16,18,20,21,23,27,28,29,33,39,42,45,46,47,49,50,51,52,53,55,57,61,63,64,65,66,67,68,69,78,79,83,84,86,88,89,91,92,98,99,100,101],$Vw=[1,74],$Vx=[1,75],$Vy=[1,76],$Vz=[5,9,16,18,20,21,23,39,40,45,47,49,50,51,52,53],$VA=[42,43,44,75,76,77,95,102,103,104,105,106],$VB=[1,105],$VC=[1,106],$VD=[2,87],$VE=[5,18,20,21,45],$VF=[5,16,18,20,21,23,45],$VG=[2,39],$VH=[1,117],$VI=[1,118],$VJ=[1,119],$VK=[1,120],$VL=[1,121],$VM=[1,122],$VN=[5,16,18,20,21,23,39,45,47,49,50,51,52,53],$VO=[5,16,18,20,21,23,39,40,45,47,49,50,51,52,53],$VP=[5,16,18,20,21,23,39,40,42,45,46,47,49,50,51,52,53],$VQ=[23,45],$VR=[5,20,21,45],$VS=[1,161],$VT=[5,20,21,23,45],$VU=[5,21,45],$VV=[98,99,101],$VW=[5,45],$VX=[5,23,45],$VY=[5,23,29,45];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"main":3,"selectClause":4,"EOF":5,"SELECT":6,"optDistinct":7,"selectExprList":8,"FROM":9,"tableExprList":10,"optWhereClause":11,"optGroupByClause":12,"optHavingClause":13,"optOrderByClause":14,"DISTINCT":15,"WHERE":16,"expression":17,"GROUP_BY":18,"commaSepExpressionList":19,"HAVING":20,"ORDER_BY":21,"orderByList":22,"COMMA":23,"orderByListItem":24,"optOrderByOrder":25,"optOrderByNulls":26,"ASC":27,"DESC":28,"NULLS":29,"FIRST":30,"LAST":31,"selectExpr":32,"STAR":33,"QUALIFIED_STAR":34,"optTableExprAlias":35,"tableExpr":36,"joinComponent":37,"optJoinModifier":38,"JOIN":39,"ON":40,"tableExprPart":41,"IDENTIFIER":42,"QUALIFIED_IDENTIFIER":43,"LPAREN":44,"RPAREN":45,"AS":46,"LEFT":47,"OUTER":48,"RIGHT":49,"FULL":50,"INNER":51,"CROSS":52,"NATURAL":53,"andCondition":54,"LOGICAL_OR":55,"condition":56,"LOGICAL_AND":57,"operand":58,"conditionRightHandSide":59,"EXISTS":60,"LOGICAL_NOT":61,"compare":62,"CMP_EQUALS":63,"CMP_NOTEQUALS":64,"CMP_NOTEQUALS_BASIC":65,"CMP_GREATER":66,"CMP_GREATEROREQUAL":67,"CMP_LESS":68,"CMP_LESSOREQUAL":69,"rhsCompareTest":70,"rhsIsTest":71,"rhsInTest":72,"rhsLikeTest":73,"rhsBetweenTest":74,"ALL":75,"ANY":76,"SOME":77,"IS":78,"IN":79,"functionParam":80,"functionExpressionList":81,"optFunctionExpressionList":82,"LIKE":83,"BETWEEN":84,"summand":85,"CONCAT":86,"factor":87,"PLUS":88,"MINUS":89,"term":90,"DIVIDE":91,"MODULO":92,"value":93,"caseWhen":94,"CASE":95,"caseWhenList":96,"optCaseWhenElse":97,"END":98,"WHEN":99,"THEN":100,"ELSE":101,"STRING":102,"NUMERIC":103,"PARAMETER":104,"BOOLEAN":105,"NULL":106,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",6:"SELECT",9:"FROM",15:"DISTINCT",16:"WHERE",18:"GROUP_BY",20:"HAVING",21:"ORDER_BY",23:"COMMA",27:"ASC",28:"DESC",29:"NULLS",30:"FIRST",31:"LAST",33:"STAR",34:"QUALIFIED_STAR",39:"JOIN",40:"ON",42:"IDENTIFIER",43:"QUALIFIED_IDENTIFIER",44:"LPAREN",45:"RPAREN",46:"AS",47:"LEFT",48:"OUTER",49:"RIGHT",50:"FULL",51:"INNER",52:"CROSS",53:"NATURAL",55:"LOGICAL_OR",57:"LOGICAL_AND",60:"EXISTS",61:"LOGICAL_NOT",63:"CMP_EQUALS",64:"CMP_NOTEQUALS",65:"CMP_NOTEQUALS_BASIC",66:"CMP_GREATER",67:"CMP_GREATEROREQUAL",68:"CMP_LESS",69:"CMP_LESSOREQUAL",75:"ALL",76:"ANY",77:"SOME",78:"IS",79:"IN",83:"LIKE",84:"BETWEEN",86:"CONCAT",88:"PLUS",89:"MINUS",91:"DIVIDE",92:"MODULO",95:"CASE",98:"END",99:"WHEN",100:"THEN",101:"ELSE",102:"STRING",103:"NUMERIC",104:"PARAMETER",105:"BOOLEAN",106:"NULL"},
productions_: [0,[3,2],[4,9],[7,0],[7,1],[11,0],[11,2],[12,0],[12,2],[13,0],[13,2],[14,0],[14,2],[22,3],[22,1],[24,3],[25,0],[25,1],[25,1],[26,0],[26,2],[26,2],[8,1],[8,3],[32,1],[32,1],[32,2],[10,1],[10,3],[36,1],[36,4],[36,6],[37,2],[41,1],[41,1],[41,3],[35,0],[35,1],[35,2],[38,0],[38,1],[38,2],[38,1],[38,2],[38,1],[38,1],[38,1],[38,1],[17,1],[17,3],[54,1],[54,3],[56,1],[56,2],[56,4],[56,2],[62,1],[62,1],[62,1],[62,1],[62,1],[62,1],[62,1],[59,1],[59,1],[59,1],[59,1],[59,1],[70,2],[70,5],[70,5],[70,5],[71,2],[71,3],[71,4],[71,5],[72,4],[72,5],[72,4],[72,5],[19,3],[19,1],[80,1],[80,1],[80,1],[81,3],[81,1],[82,0],[82,1],[73,2],[73,3],[74,4],[74,5],[58,1],[58,3],[85,1],[85,3],[85,3],[87,1],[87,3],[87,3],[87,3],[90,1],[90,1],[90,1],[90,1],[90,3],[90,4],[90,4],[94,4],[96,5],[96,4],[97,0],[97,2],[93,1],[93,1],[93,1],[93,1],[93,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return $$[$0-1]; 
break;
case 2:
 this.$ = {type: 'select', distinct: !!$$[$0-8], columns: $$[$0-6], from: $$[$0-4], where:$$[$0-3], group:$$[$0-2], having:$$[$0-1], order:$$[$0]}; 
break;
case 3: case 18:
 this.$ = false; 
break;
case 4: case 16: case 17:
 this.$ = true; 
break;
case 5: case 7: case 9: case 11: case 36: case 87: case 112:
 this.$ = null; 
break;
case 6: case 8: case 10: case 12: case 33: case 34: case 56: case 57: case 58: case 59: case 60: case 61: case 62: case 63: case 64: case 65: case 66: case 67: case 82: case 83: case 84: case 88: case 93: case 95: case 98: case 102: case 105: case 113:
 this.$ = $$[$0]; 
break;
case 13: case 23: case 28: case 51: case 80: case 85:
 this.$ = $$[$0-2]; $$[$0-2].push($$[$0]); 
break;
case 14: case 22: case 27: case 50: case 81: case 86:
 this.$ = [$$[$0]]; 
break;
case 15:
 this.$ = {expr:$$[$0-2], orderAsc: $$[$0-1], orderByNulls: $$[$0]}; 
break;
case 19:
 this.$ = '';
break;
case 20:
 this.$ = 'NULLS FIRST'; 
break;
case 21:
 this.$ = 'NULLS LAST'; 
break;
case 24:
 this.$ = {type: 'column', value:'*'}; 
break;
case 25:
 this.$ = {type: 'column', value:$$[$0]}; 
break;
case 26:
 this.$ = {type: 'column', value:$$[$0-1], alias:$$[$0]}; 
break;
case 29:
 this.$ = {type:'table', value: $$[$0], join: []}; 
break;
case 30:
 this.$ = $$[$0-3]; $$[$0-3].join.push({type:'table', value: $$[$0], modifier:$$[$0-2]}); 
break;
case 31:
 this.$ = $$[$0-5]; $$[$0-5].join.push({type:'table', value: $$[$0-2], modifier:$$[$0-4], expr:$$[$0]}); 
break;
case 32:
 this.$ = {name: $$[$0-1], alias: $$[$0]}; 
break;
case 35:
 this.$ = $$[$0-1]; 
break;
case 37:
 this.$ = {value: $$[$0] }; 
break;
case 38:
 this.$ = {value: $$[$0], alias: 1}; 
break;
case 39:
 this.$ = ''; 
break;
case 40:
 this.$ = 'LEFT'; 
break;
case 41:
 this.$ = 'LEFT OUTER'; 
break;
case 42:
 this.$ = 'RIGHT'; 
break;
case 43:
 this.$ = 'RIGHT OUTER'; 
break;
case 44:
 this.$ = 'FULL'; 
break;
case 45:
 this.$ = 'INNER'; 
break;
case 46:
 this.$ = 'CROSS'; 
break;
case 47:
 this.$ = 'NATURAL'; 
break;
case 48:
 this.$ = {type:'and', value: $$[$0]}; 
break;
case 49:
 this.$ = {type:'or', left: $$[$0-2], right: $$[$0]}; 
break;
case 52:
 this.$ = {type: 'Condition', value: $$[$0]}; 
break;
case 53:
 this.$ = {type: 'BinaryCondition', left: $$[$0-1], right: $$[$0]}; 
break;
case 54:
 this.$ = {type: 'ExistsCondition', value: $$[$0-1]}; 
break;
case 55:
 this.$ = {type: 'NotCondition', value: $$[$0]}; 
break;
case 68:
 this.$ = {type: 'RhsCompare', op: $$[$0-1], value: $$[$0] }; 
break;
case 69: case 70: case 71:
 this.$ = {type: 'RhsCompareSub', op:$$[$0-4], kind: $$[$0-3], value: $$[$0-1] }; 
break;
case 72:
 this.$ = {type: 'RhsIs', value: $$[$0]}; 
break;
case 73:
 this.$ = {type: 'RhsIs', value: $$[$0], not:1}; 
break;
case 74:
 this.$ = {type: 'RhsIs', value: $$[$0], distinctFrom:1}; 
break;
case 75:
 this.$ = {type: 'RhsIs', value: $$[$0], not:1, distinctFrom:1}; 
break;
case 76:
 this.$ = { type: 'RhsInSelect', value: $$[$0-1] }; 
break;
case 77:
 this.$ = { type: 'RhsInSelect', value: $$[$0-1], not:1 }; 
break;
case 78:
 this.$ = { type: 'RhsInExpressionList', value: $$[$0-1] }; 
break;
case 79:
 this.$ = { type: 'RhsInExpressionList', value: $$[$0-1], not:1 }; 
break;
case 89:
 this.$ = {type: 'RhsLike', value: $$[$0]}; 
break;
case 90:
 this.$ = {type: 'RhsLike', value: $$[$0], not:1}; 
break;
case 91:
 this.$ = {type: 'RhsBetween', left: $$[$0-2], right: $$[$0]}; 
break;
case 92:
 this.$ = {type: 'RhsBetween', left: $$[$0-2], right: $$[$0], not:1}; 
break;
case 94:
 this.$ = {type:'Operand', left:$$[$0-2], right:$$[$0], op:$$[$0-1]}; 
break;
case 96: case 97:
 this.$ = {type:'Summand', left:$$[$0-2], right:$$[$0], op:$$[$0-1]}; 
break;
case 99: case 100: case 101:
 this.$ = {type:'Factor', left:$$[$0-2], right:$$[$0], op:$$[$0-1]}; 
break;
case 103: case 104:
 this.$ = {type: 'Term', value: $$[$0]}; 
break;
case 106:
 this.$ = {type: 'Term', value: $$[$0-1]}; 
break;
case 107: case 108:
 this.$ = {type: 'call', name: $$[$0-3], args: $$[$0-1]}; 
break;
case 109:
 this.$ = {type:'case', clauses: $$[$0-2], else: $$[$0-1]}; 
break;
case 110:
 this.$ = $$[$0-4]; $$[$0-4].push({when: $$[$0-2], then: $$[$0]}); 
break;
case 111:
 this.$ = [{when: $$[$0-2], then: $$[$0]}]; 
break;
case 114:
 this.$ = {type: 'string', value: $$[$0]}; 
break;
case 115:
 this.$ = {type: 'number', value: $$[$0]}; 
break;
case 116:
 this.$ = {type: 'param', name: $$[$0].substring(1)}; 
break;
case 117:
 this.$ = {type: 'boolean', value: $$[$0]}; 
break;
case 118:
 this.$ = {type: 'null'}; 
break;
}
},
table: [{3:1,4:2,6:$V0},{1:[3]},{5:[1,4]},o($V1,[2,3],{7:5,15:[1,6]}),{1:[2,1]},{8:7,17:11,32:8,33:$V2,34:$V3,42:$V4,43:$V5,44:$V6,54:12,56:13,58:14,60:$V7,61:$V8,85:17,87:18,90:19,93:20,94:23,95:$V9,102:$Va,103:$Vb,104:$Vc,105:$Vd,106:$Ve},o($V1,[2,4]),{9:[1,31],23:[1,32]},o($Vf,[2,22]),o($Vf,[2,24]),o($Vf,[2,25]),o($Vf,$Vg,{35:33,42:$Vh,46:$Vi,55:$Vj}),o($Vk,[2,48],{57:$Vl}),o($Vm,[2,50]),o($Vm,[2,52],{59:38,70:40,71:41,72:42,73:43,74:44,62:45,61:[1,48],63:[1,51],64:[1,52],65:[1,53],66:[1,54],67:[1,55],68:[1,56],69:[1,57],78:[1,46],79:[1,47],83:[1,49],84:[1,50],86:$Vn}),{44:[1,58]},{42:$V4,43:$V5,44:$V6,56:59,58:14,60:$V7,61:$V8,85:17,87:18,90:19,93:20,94:23,95:$V9,102:$Va,103:$Vb,104:$Vc,105:$Vd,106:$Ve},o($Vo,[2,93],{88:$Vp,89:$Vq}),o($Vr,[2,95],{33:$Vs,91:$Vt,92:$Vu}),o($Vv,[2,98]),o($Vv,[2,102]),o($Vv,[2,103],{44:[1,65]}),o($Vv,[2,104],{44:[1,66]}),o($Vv,[2,105]),{17:67,42:$V4,43:$V5,44:$V6,54:12,56:13,58:14,60:$V7,61:$V8,85:17,87:18,90:19,93:20,94:23,95:$V9,102:$Va,103:$Vb,104:$Vc,105:$Vd,106:$Ve},o($Vv,[2,114]),o($Vv,[2,115]),o($Vv,[2,116]),o($Vv,[2,117]),o($Vv,[2,118]),{96:68,99:[1,69]},{10:70,36:71,37:72,41:73,42:$Vw,43:$Vx,44:$Vy},{17:11,32:77,33:$V2,34:$V3,42:$V4,43:$V5,44:$V6,54:12,56:13,58:14,60:$V7,61:$V8,85:17,87:18,90:19,93:20,94:23,95:$V9,102:$Va,103:$Vb,104:$Vc,105:$Vd,106:$Ve},o($Vf,[2,26]),{42:$V4,43:$V5,44:$V6,54:78,56:13,58:14,60:$V7,61:$V8,85:17,87:18,90:19,93:20,94:23,95:$V9,102:$Va,103:$Vb,104:$Vc,105:$Vd,106:$Ve},o($Vz,[2,37]),{42:[1,79]},{42:$V4,43:$V5,44:$V6,56:80,58:14,60:$V7,61:$V8,85:17,87:18,90:19,93:20,94:23,95:$V9,102:$Va,103:$Vb,104:$Vc,105:$Vd,106:$Ve},o($Vm,[2,53]),{42:$V4,43:$V5,44:$V6,85:81,87:18,90:19,93:20,94:23,95:$V9,102:$Va,103:$Vb,104:$Vc,105:$Vd,106:$Ve},o($Vm,[2,63]),o($Vm,[2,64]),o($Vm,[2,65]),o($Vm,[2,66]),o($Vm,[2,67]),{42:$V4,43:$V5,44:$V6,58:82,75:[1,83],76:[1,84],77:[1,85],85:17,87:18,90:19,93:20,94:23,95:$V9,102:$Va,103:$Vb,104:$Vc,105:$Vd,106:$Ve},{15:[1,88],42:$V4,43:$V5,44:$V6,58:86,61:[1,87],85:17,87:18,90:19,93:20,94:23,95:$V9,102:$Va,103:$Vb,104:$Vc,105:$Vd,106:$Ve},{44:[1,89]},{79:[1,90],83:[1,91],84:[1,92]},{42:$V4,43:$V5,44:$V6,58:93,85:17,87:18,90:19,93:20,94:23,95:$V9,102:$Va,103:$Vb,104:$Vc,105:$Vd,106:$Ve},{42:$V4,43:$V5,44:$V6,58:94,85:17,87:18,90:19,93:20,94:23,95:$V9,102:$Va,103:$Vb,104:$Vc,105:$Vd,106:$Ve},o($VA,[2,56]),o($VA,[2,57]),o($VA,[2,58]),o($VA,[2,59]),o($VA,[2,60]),o($VA,[2,61]),o($VA,[2,62]),{4:95,6:$V0},o($Vm,[2,55]),{42:$V4,43:$V5,44:$V6,87:96,90:19,93:20,94:23,95:$V9,102:$Va,103:$Vb,104:$Vc,105:$Vd,106:$Ve},{42:$V4,43:$V5,44:$V6,87:97,90:19,93:20,94:23,95:$V9,102:$Va,103:$Vb,104:$Vc,105:$Vd,106:$Ve},{42:$V4,43:$V5,44:$V6,90:98,93:20,94:23,95:$V9,102:$Va,103:$Vb,104:$Vc,105:$Vd,106:$Ve},{42:$V4,43:$V5,44:$V6,90:99,93:20,94:23,95:$V9,102:$Va,103:$Vb,104:$Vc,105:$Vd,106:$Ve},{42:$V4,43:$V5,44:$V6,90:100,93:20,94:23,95:$V9,102:$Va,103:$Vb,104:$Vc,105:$Vd,106:$Ve},{17:104,33:$VB,34:$VC,42:$V4,43:$V5,44:$V6,45:$VD,54:12,56:13,58:14,60:$V7,61:$V8,80:103,81:102,82:101,85:17,87:18,90:19,93:20,94:23,95:$V9,102:$Va,103:$Vb,104:$Vc,105:$Vd,106:$Ve},{17:104,33:$VB,34:$VC,42:$V4,43:$V5,44:$V6,45:$VD,54:12,56:13,58:14,60:$V7,61:$V8,80:103,81:102,82:107,85:17,87:18,90:19,93:20,94:23,95:$V9,102:$Va,103:$Vb,104:$Vc,105:$Vd,106:$Ve},{45:[1,108],55:$Vj},{97:109,98:[2,112],99:[1,110],101:[1,111]},{17:112,42:$V4,43:$V5,44:$V6,54:12,56:13,58:14,60:$V7,61:$V8,85:17,87:18,90:19,93:20,94:23,95:$V9,102:$Va,103:$Vb,104:$Vc,105:$Vd,106:$Ve},o($VE,[2,5],{11:113,16:[1,115],23:[1,114]}),o($VF,[2,27],{38:116,39:$VG,47:$VH,49:$VI,50:$VJ,51:$VK,52:$VL,53:$VM}),o($VN,[2,29]),o($VO,$Vg,{35:123,42:$Vh,46:$Vi}),o($VP,[2,33]),o($VP,[2,34]),{4:124,6:$V0},o($Vf,[2,23]),o($Vk,[2,49],{57:$Vl}),o($Vz,[2,38]),o($Vm,[2,51]),o($Vo,[2,94],{88:$Vp,89:$Vq}),o($Vm,[2,68],{86:$Vn}),{44:[1,125]},{44:[1,126]},{44:[1,127]},o($Vm,[2,72],{86:$Vn}),{15:[1,129],42:$V4,43:$V5,44:$V6,58:128,85:17,87:18,90:19,93:20,94:23,95:$V9,102:$Va,103:$Vb,104:$Vc,105:$Vd,106:$Ve},{9:[1,130]},{4:131,6:$V0,17:133,19:132,42:$V4,43:$V5,44:$V6,54:12,56:13,58:14,60:$V7,61:$V8,85:17,87:18,90:19,93:20,94:23,95:$V9,102:$Va,103:$Vb,104:$Vc,105:$Vd,106:$Ve},{44:[1,134]},{42:$V4,43:$V5,44:$V6,58:135,85:17,87:18,90:19,93:20,94:23,95:$V9,102:$Va,103:$Vb,104:$Vc,105:$Vd,106:$Ve},{42:$V4,43:$V5,44:$V6,58:136,85:17,87:18,90:19,93:20,94:23,95:$V9,102:$Va,103:$Vb,104:$Vc,105:$Vd,106:$Ve},o($Vm,[2,89],{86:$Vn}),{57:[1,137],86:$Vn},{45:[1,138]},o($Vr,[2,96],{33:$Vs,91:$Vt,92:$Vu}),o($Vr,[2,97],{33:$Vs,91:$Vt,92:$Vu}),o($Vv,[2,99]),o($Vv,[2,100]),o($Vv,[2,101]),{45:[1,139]},{23:[1,140],45:[2,88]},o($VQ,[2,86]),o($VQ,[2,82],{55:$Vj}),o($VQ,[2,83]),o($VQ,[2,84]),{45:[1,141]},o($Vv,[2,106]),{98:[1,142]},{17:143,42:$V4,43:$V5,44:$V6,54:12,56:13,58:14,60:$V7,61:$V8,85:17,87:18,90:19,93:20,94:23,95:$V9,102:$Va,103:$Vb,104:$Vc,105:$Vd,106:$Ve},{17:144,42:$V4,43:$V5,44:$V6,54:12,56:13,58:14,60:$V7,61:$V8,85:17,87:18,90:19,93:20,94:23,95:$V9,102:$Va,103:$Vb,104:$Vc,105:$Vd,106:$Ve},{55:$Vj,100:[1,145]},o($VR,[2,7],{12:146,18:[1,147]}),{36:148,37:72,41:73,42:$Vw,43:$Vx,44:$Vy},{17:149,42:$V4,43:$V5,44:$V6,54:12,56:13,58:14,60:$V7,61:$V8,85:17,87:18,90:19,93:20,94:23,95:$V9,102:$Va,103:$Vb,104:$Vc,105:$Vd,106:$Ve},{39:[1,150]},{39:[2,40],48:[1,151]},{39:[2,42],48:[1,152]},{39:[2,44]},{39:[2,45]},{39:[2,46]},{39:[2,47]},o($VO,[2,32]),{45:[1,153]},{4:154,6:$V0},{4:155,6:$V0},{4:156,6:$V0},o($Vm,[2,73],{86:$Vn}),{9:[1,157]},{42:$V4,43:$V5,44:$V6,58:158,85:17,87:18,90:19,93:20,94:23,95:$V9,102:$Va,103:$Vb,104:$Vc,105:$Vd,106:$Ve},{45:[1,159]},{23:$VS,45:[1,160]},o($VT,[2,81],{55:$Vj}),{4:162,6:$V0,17:133,19:163,42:$V4,43:$V5,44:$V6,54:12,56:13,58:14,60:$V7,61:$V8,85:17,87:18,90:19,93:20,94:23,95:$V9,102:$Va,103:$Vb,104:$Vc,105:$Vd,106:$Ve},o($Vm,[2,90],{86:$Vn}),{57:[1,164],86:$Vn},{42:$V4,43:$V5,44:$V6,58:165,85:17,87:18,90:19,93:20,94:23,95:$V9,102:$Va,103:$Vb,104:$Vc,105:$Vd,106:$Ve},o($Vm,[2,54]),o($Vv,[2,107]),{17:104,33:$VB,34:$VC,42:$V4,43:$V5,44:$V6,54:12,56:13,58:14,60:$V7,61:$V8,80:166,85:17,87:18,90:19,93:20,94:23,95:$V9,102:$Va,103:$Vb,104:$Vc,105:$Vd,106:$Ve},o($Vv,[2,108]),o($Vv,[2,109]),{55:$Vj,100:[1,167]},{55:$Vj,98:[2,113]},{17:168,42:$V4,43:$V5,44:$V6,54:12,56:13,58:14,60:$V7,61:$V8,85:17,87:18,90:19,93:20,94:23,95:$V9,102:$Va,103:$Vb,104:$Vc,105:$Vd,106:$Ve},o($VU,[2,9],{13:169,20:[1,170]}),{17:133,19:171,42:$V4,43:$V5,44:$V6,54:12,56:13,58:14,60:$V7,61:$V8,85:17,87:18,90:19,93:20,94:23,95:$V9,102:$Va,103:$Vb,104:$Vc,105:$Vd,106:$Ve},o($VF,[2,28],{38:116,39:$VG,47:$VH,49:$VI,50:$VJ,51:$VK,52:$VL,53:$VM}),o($VE,[2,6],{55:$Vj}),{37:172,41:73,42:$Vw,43:$Vx,44:$Vy},{39:[2,41]},{39:[2,43]},o($VP,[2,35]),{45:[1,173]},{45:[1,174]},{45:[1,175]},{42:$V4,43:$V5,44:$V6,58:176,85:17,87:18,90:19,93:20,94:23,95:$V9,102:$Va,103:$Vb,104:$Vc,105:$Vd,106:$Ve},o($Vm,[2,74],{86:$Vn}),o($Vm,[2,76]),o($Vm,[2,78]),{17:177,42:$V4,43:$V5,44:$V6,54:12,56:13,58:14,60:$V7,61:$V8,85:17,87:18,90:19,93:20,94:23,95:$V9,102:$Va,103:$Vb,104:$Vc,105:$Vd,106:$Ve},{45:[1,178]},{23:$VS,45:[1,179]},{42:$V4,43:$V5,44:$V6,58:180,85:17,87:18,90:19,93:20,94:23,95:$V9,102:$Va,103:$Vb,104:$Vc,105:$Vd,106:$Ve},o($Vm,[2,91],{86:$Vn}),o($VQ,[2,85]),{17:181,42:$V4,43:$V5,44:$V6,54:12,56:13,58:14,60:$V7,61:$V8,85:17,87:18,90:19,93:20,94:23,95:$V9,102:$Va,103:$Vb,104:$Vc,105:$Vd,106:$Ve},o($VV,[2,111],{55:$Vj}),o($VW,[2,11],{14:182,21:[1,183]}),{17:184,42:$V4,43:$V5,44:$V6,54:12,56:13,58:14,60:$V7,61:$V8,85:17,87:18,90:19,93:20,94:23,95:$V9,102:$Va,103:$Vb,104:$Vc,105:$Vd,106:$Ve},o($VR,[2,8],{23:$VS}),o($VN,[2,30],{40:[1,185]}),o($Vm,[2,69]),o($Vm,[2,70]),o($Vm,[2,71]),o($Vm,[2,75],{86:$Vn}),o($VT,[2,80],{55:$Vj}),o($Vm,[2,77]),o($Vm,[2,79]),o($Vm,[2,92],{86:$Vn}),o($VV,[2,110],{55:$Vj}),o($VW,[2,2]),{17:188,22:186,24:187,42:$V4,43:$V5,44:$V6,54:12,56:13,58:14,60:$V7,61:$V8,85:17,87:18,90:19,93:20,94:23,95:$V9,102:$Va,103:$Vb,104:$Vc,105:$Vd,106:$Ve},o($VU,[2,10],{55:$Vj}),{17:189,42:$V4,43:$V5,44:$V6,54:12,56:13,58:14,60:$V7,61:$V8,85:17,87:18,90:19,93:20,94:23,95:$V9,102:$Va,103:$Vb,104:$Vc,105:$Vd,106:$Ve},o($VW,[2,12],{23:[1,190]}),o($VX,[2,14]),o($VY,[2,16],{25:191,27:[1,192],28:[1,193],55:$Vj}),o($VN,[2,31],{55:$Vj}),{17:188,24:194,42:$V4,43:$V5,44:$V6,54:12,56:13,58:14,60:$V7,61:$V8,85:17,87:18,90:19,93:20,94:23,95:$V9,102:$Va,103:$Vb,104:$Vc,105:$Vd,106:$Ve},o($VX,[2,19],{26:195,29:[1,196]}),o($VY,[2,17]),o($VY,[2,18]),o($VX,[2,13]),o($VX,[2,15]),{30:[1,197],31:[1,198]},o($VX,[2,20]),o($VX,[2,21])],
defaultActions: {4:[2,1],119:[2,44],120:[2,45],121:[2,46],122:[2,47],151:[2,41],152:[2,43]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        function lex() {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 43
break;
case 1:return 34
break;
case 2:/* skip whitespace */
break;
case 3:return 6
break;
case 4:return 9
break;
case 5:return 16
break;
case 6:return 15
break;
case 7:return 84
break;
case 8:return 18
break;
case 9:return 20
break;
case 10:return 21
break;
case 11:return 23
break;
case 12:return 88
break;
case 13:return 89
break;
case 14:return 91
break;
case 15:return 33
break;
case 16:return 92
break;
case 17:return 63
break;
case 18:return 64
break;
case 19:return 65
break;
case 20:return 67
break;
case 21:return 66
break;
case 22:return 69
break;
case 23:return 68
break;
case 24:return 44
break;
case 25:return 45
break;
case 26:return 86
break;
case 27:return 46
break;
case 28:return 75
break;
case 29:return 76
break;
case 30:return 77
break;
case 31:return 60
break;
case 32:return 78
break;
case 33:return 79
break;
case 34:return 40
break;
case 35:return 57
break;
case 36:return 55
break;
case 37:return 61
break;
case 38:return 51
break;
case 39:return 48
break;
case 40:return 39
break;
case 41:return 47
break;
case 42:return 49
break;
case 43:return 50
break;
case 44:return 53
break;
case 45:return 52
break;
case 46:return 95
break;
case 47:return 99
break;
case 48:return 100
break;
case 49:return 101
break;
case 50:return 98
break;
case 51:return 83
break;
case 52:return 27
break;
case 53:return 28
break;
case 54:return 29
break;
case 55:return 30
break;
case 56:return 31
break;
case 57:return 102
break;
case 58:return 106
break;
case 59:return 105
break;
case 60:return 104
break;
case 61:return 103
break;
case 62:return 42
break;
case 63:return 5
break;
case 64:return 'INVALID'
break;
}
},
rules: [/^(?:[a-zA-Z_][a-zA-Z0-9_]*\.[a-zA-Z_][a-zA-Z0-9_]*)/i,/^(?:[a-zA-Z_][a-zA-Z0-9_]*\.\*)/i,/^(?:\s+)/i,/^(?:SELECT\b)/i,/^(?:FROM\b)/i,/^(?:WHERE\b)/i,/^(?:DISTINCT\b)/i,/^(?:BETWEEN\b)/i,/^(?:GROUP BY\b)/i,/^(?:HAVING\b)/i,/^(?:ORDER BY\b)/i,/^(?:,)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\/)/i,/^(?:\*)/i,/^(?:%)/i,/^(?:=)/i,/^(?:!=)/i,/^(?:<>)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\|\|)/i,/^(?:AS\b)/i,/^(?:ALL\b)/i,/^(?:ANY\b)/i,/^(?:SOME\b)/i,/^(?:EXISTS\b)/i,/^(?:IS\b)/i,/^(?:IN\b)/i,/^(?:ON\b)/i,/^(?:AND\b)/i,/^(?:OR\b)/i,/^(?:NOT\b)/i,/^(?:INNER\b)/i,/^(?:OUTER\b)/i,/^(?:JOIN\b)/i,/^(?:LEFT\b)/i,/^(?:RIGHT\b)/i,/^(?:FULL\b)/i,/^(?:NATURAL\b)/i,/^(?:CROSS\b)/i,/^(?:CASE\b)/i,/^(?:WHEN\b)/i,/^(?:THEN\b)/i,/^(?:ELSE\b)/i,/^(?:END\b)/i,/^(?:LIKE\b)/i,/^(?:ASC\b)/i,/^(?:DESC\b)/i,/^(?:NULLS\b)/i,/^(?:FIRST\b)/i,/^(?:LAST\b)/i,/^(?:['](\\.|[^'])*['])/i,/^(?:NULL\b)/i,/^(?:(true|false))/i,/^(?::[a-zA-Z_][a-zA-Z0-9_]*)/i,/^(?:[0-9]+(\.[0-9]+)?)/i,/^(?:[a-zA-Z_][a-zA-Z0-9_]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}