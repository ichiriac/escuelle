/* parser generated by jison 0.4.17 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,3],$V1=[23,36,37,45,46,47,48,49,64,65,99,106,107,108,109],$V2=[1,27],$V3=[1,9],$V4=[1,10],$V5=[1,20],$V6=[1,21],$V7=[1,22],$V8=[1,23],$V9=[1,25],$Va=[1,14],$Vb=[1,15],$Vc=[1,31],$Vd=[1,26],$Ve=[1,28],$Vf=[1,29],$Vg=[1,30],$Vh=[9,24],$Vi=[2,41],$Vj=[1,35],$Vk=[1,36],$Vl=[5,9,17,19,21,22,24,25,30,31,32,42,45,50,51,52,54,55,56,57,58,102,103,104,105],$Vm=[5,9,17,19,21,22,24,25,30,31,32,42,45,50,51,52,54,55,56,57,58,60,61,102,103,104,105],$Vn=[1,40],$Vo=[5,9,17,19,21,22,24,25,30,31,32,42,45,50,51,52,54,55,56,57,58,60,61,65,67,68,69,70,71,72,73,82,83,87,88,90,102,103,104,105],$Vp=[1,61],$Vq=[1,62],$Vr=[5,9,17,19,21,22,24,25,30,31,32,42,45,50,51,52,54,55,56,57,58,60,61,65,67,68,69,70,71,72,73,82,83,87,88,90,92,93,102,103,104,105],$Vs=[1,64],$Vt=[1,63],$Vu=[1,65],$Vv=[5,9,17,19,21,22,24,25,30,31,32,36,42,45,50,51,52,54,55,56,57,58,60,61,65,67,68,69,70,71,72,73,82,83,87,88,90,92,93,95,96,102,103,104,105],$Vw=[1,75],$Vx=[1,76],$Vy=[1,77],$Vz=[1,78],$VA=[1,79],$VB=[5,9,17,19,21,22,24,25,42,43,50,52,54,55,56,57,58],$VC=[23,45,46,47,48,49,79,80,81,99,106,107,108,109],$VD=[1,108],$VE=[1,109],$VF=[2,91],$VG=[5,19,21,22,25,50],$VH=[5,17,19,21,22,24,25,50],$VI=[2,44],$VJ=[1,120],$VK=[1,121],$VL=[1,122],$VM=[1,123],$VN=[1,124],$VO=[1,125],$VP=[5,17,19,21,22,24,25,42,50,52,54,55,56,57,58],$VQ=[5,17,19,21,22,24,25,42,43,50,52,54,55,56,57,58],$VR=[5,17,19,21,22,24,25,42,43,45,50,51,52,54,55,56,57,58],$VS=[24,50],$VT=[5,21,22,25,50],$VU=[1,164],$VV=[5,21,22,24,25,50],$VW=[5,22,25,50],$VX=[102,103,105],$VY=[5,22,50],$VZ=[5,50],$V_=[5,22,24,50],$V$=[5,22,24,32,50];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"main":3,"selectClause":4,"EOF":5,"SELECT":6,"optDistinct":7,"selectExprList":8,"FROM":9,"tableExprList":10,"optWhereClause":11,"optGroupByClause":12,"optHavingClause":13,"optOrderByClause":14,"optLimitClause":15,"DISTINCT":16,"WHERE":17,"expression":18,"GROUP_BY":19,"commaSepExpressionList":20,"HAVING":21,"LIMIT":22,"NUMERIC":23,"COMMA":24,"ORDER_BY":25,"orderByList":26,"orderByListItem":27,"optOrderByOrder":28,"optOrderByNulls":29,"ASC":30,"DESC":31,"NULLS":32,"FIRST":33,"LAST":34,"selectExpr":35,"STAR":36,"QUALIFIED_STAR":37,"optTableExprAlias":38,"tableExpr":39,"joinComponent":40,"optJoinModifier":41,"JOIN":42,"ON":43,"tableExprPart":44,"IDENTIFIER":45,"QUALIFIED_IDENTIFIER":46,"MS_IDENTIFIER":47,"MS_QUALIFIED_IDENTIFIER":48,"LPAREN":49,"RPAREN":50,"AS":51,"LEFT":52,"OUTER":53,"RIGHT":54,"FULL":55,"INNER":56,"CROSS":57,"NATURAL":58,"condition":59,"LOGICAL_AND":60,"LOGICAL_OR":61,"operand":62,"conditionRightHandSide":63,"EXISTS":64,"LOGICAL_NOT":65,"compare":66,"CMP_EQUALS":67,"CMP_NOTEQUALS":68,"CMP_NOTEQUALS_BASIC":69,"CMP_GREATER":70,"CMP_GREATEROREQUAL":71,"CMP_LESS":72,"CMP_LESSOREQUAL":73,"rhsCompareTest":74,"rhsIsTest":75,"rhsInTest":76,"rhsLikeTest":77,"rhsBetweenTest":78,"ALL":79,"ANY":80,"SOME":81,"IS":82,"IN":83,"functionParam":84,"functionExpressionList":85,"optFunctionExpressionList":86,"LIKE":87,"BETWEEN":88,"summand":89,"CONCAT":90,"factor":91,"PLUS":92,"MINUS":93,"term":94,"DIVIDE":95,"MODULO":96,"value":97,"caseWhen":98,"CASE":99,"caseWhenList":100,"optCaseWhenElse":101,"END":102,"WHEN":103,"THEN":104,"ELSE":105,"STRING":106,"PARAMETER":107,"BOOLEAN":108,"NULL":109,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",6:"SELECT",9:"FROM",16:"DISTINCT",17:"WHERE",19:"GROUP_BY",21:"HAVING",22:"LIMIT",23:"NUMERIC",24:"COMMA",25:"ORDER_BY",30:"ASC",31:"DESC",32:"NULLS",33:"FIRST",34:"LAST",36:"STAR",37:"QUALIFIED_STAR",42:"JOIN",43:"ON",45:"IDENTIFIER",46:"QUALIFIED_IDENTIFIER",47:"MS_IDENTIFIER",48:"MS_QUALIFIED_IDENTIFIER",49:"LPAREN",50:"RPAREN",51:"AS",52:"LEFT",53:"OUTER",54:"RIGHT",55:"FULL",56:"INNER",57:"CROSS",58:"NATURAL",60:"LOGICAL_AND",61:"LOGICAL_OR",64:"EXISTS",65:"LOGICAL_NOT",67:"CMP_EQUALS",68:"CMP_NOTEQUALS",69:"CMP_NOTEQUALS_BASIC",70:"CMP_GREATER",71:"CMP_GREATEROREQUAL",72:"CMP_LESS",73:"CMP_LESSOREQUAL",79:"ALL",80:"ANY",81:"SOME",82:"IS",83:"IN",87:"LIKE",88:"BETWEEN",90:"CONCAT",92:"PLUS",93:"MINUS",95:"DIVIDE",96:"MODULO",99:"CASE",102:"END",103:"WHEN",104:"THEN",105:"ELSE",106:"STRING",107:"PARAMETER",108:"BOOLEAN",109:"NULL"},
productions_: [0,[3,2],[4,10],[7,0],[7,1],[11,0],[11,2],[12,0],[12,2],[13,0],[13,2],[15,0],[15,4],[15,2],[14,0],[14,2],[26,3],[26,1],[27,3],[28,0],[28,1],[28,1],[29,0],[29,2],[29,2],[8,1],[8,3],[35,1],[35,1],[35,2],[10,1],[10,3],[39,1],[39,4],[39,6],[40,2],[44,1],[44,1],[44,1],[44,1],[44,3],[38,0],[38,1],[38,2],[41,0],[41,1],[41,2],[41,1],[41,2],[41,1],[41,1],[41,1],[41,1],[18,1],[18,3],[18,3],[59,1],[59,2],[59,4],[59,2],[66,1],[66,1],[66,1],[66,1],[66,1],[66,1],[66,1],[63,1],[63,1],[63,1],[63,1],[63,1],[74,2],[74,5],[74,5],[74,5],[75,2],[75,3],[75,4],[75,5],[76,4],[76,5],[76,4],[76,5],[20,3],[20,1],[84,1],[84,1],[84,1],[85,3],[85,1],[86,0],[86,1],[77,2],[77,3],[78,4],[78,5],[62,1],[62,3],[89,1],[89,3],[89,3],[91,1],[91,3],[91,3],[91,3],[94,1],[94,1],[94,1],[94,1],[94,1],[94,1],[94,3],[94,4],[94,4],[98,4],[100,5],[100,4],[101,0],[101,2],[97,1],[97,1],[97,1],[97,1],[97,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return $$[$0-1]; 
break;
case 2:

        this.$ = {
          type: 'select',
          distinct: !!$$[$0-9],
          columns: $$[$0-7],
          from: $$[$0-5],
          where:$$[$0-4],
          group:$$[$0-3],
          having:$$[$0-2],
          order:$$[$0-1],
          limit: $$[$0]
        };
      
break;
case 3: case 21:
 this.$ = false; 
break;
case 4: case 19: case 20:
 this.$ = true; 
break;
case 5: case 7: case 9: case 11: case 14: case 41: case 91: case 118:
 this.$ = null; 
break;
case 6: case 8: case 10: case 15: case 36: case 37: case 56: case 67: case 68: case 69: case 70: case 71: case 86: case 87: case 88: case 92: case 97: case 99: case 102: case 106: case 111: case 119:
 this.$ = $$[$0]; 
break;
case 12:
 this.$ = [parseInt($$[$0-2]), parseInt($$[$0])]; 
break;
case 13:
 this.$ = [0, parseInt($$[$0])]; 
break;
case 16: case 26: case 31: case 84: case 89:
 this.$ = $$[$0-2]; $$[$0-2].push($$[$0]); 
break;
case 17: case 25: case 30: case 85: case 90:
 this.$ = [$$[$0]]; 
break;
case 18:
 this.$ = {expr:$$[$0-2], orderAsc: $$[$0-1], orderByNulls: $$[$0]}; 
break;
case 22:
 this.$ = '';
break;
case 23:
 this.$ = 'NULLS FIRST'; 
break;
case 24:
 this.$ = 'NULLS LAST'; 
break;
case 27:
 this.$ = {type: 'column', value:'*'}; 
break;
case 28:
 this.$ = {type: 'column', value:$$[$0]}; 
break;
case 29:
 this.$ = {type: 'column', value:$$[$0-1], alias:$$[$0]}; 
break;
case 32:
 this.$ = {type:'table', value: $$[$0], join: []}; 
break;
case 33:
 this.$ = $$[$0-3]; $$[$0-3].join.push({type:'table', value: $$[$0], modifier:$$[$0-2]}); 
break;
case 34:
 this.$ = $$[$0-5]; $$[$0-5].join.push({type:'table', value: $$[$0-2], modifier:$$[$0-4], expr:$$[$0]}); 
break;
case 35:
 this.$ = {name: $$[$0-1], alias: $$[$0]}; 
break;
case 38: case 39:
 this.$ = $$[$0].substring(1, $$[$0].length - 1); 
break;
case 40: case 112:
 this.$ = $$[$0-1]; 
break;
case 42:
 this.$ = {value: $$[$0] }; 
break;
case 43:
 this.$ = {value: $$[$0], alias: 1}; 
break;
case 44:
 this.$ = ''; 
break;
case 45:
 this.$ = 'LEFT'; 
break;
case 46:
 this.$ = 'LEFT OUTER'; 
break;
case 47:
 this.$ = 'RIGHT'; 
break;
case 48:
 this.$ = 'RIGHT OUTER'; 
break;
case 49:
 this.$ = 'FULL'; 
break;
case 50:
 this.$ = 'INNER'; 
break;
case 51:
 this.$ = 'CROSS'; 
break;
case 52:
 this.$ = 'NATURAL'; 
break;
case 53:
 this.$ = { condition:'AND', rules: [$$[$0]]}; 
break;
case 54:

      if($$[$0].condition === 'AND') {
        $$[$0].rules.unshift($$[$0-2]);
        $$[$0-2] = $$[$0].rules;
      } else {
        if ($$[$0].rules.length === 1) $$[$0] = $$[$0].rules[0];
        $$[$0-2] = [$$[$0-2], $$[$0]];
      }
      this.$ = { condition: 'AND', rules: $$[$0-2] };
    
break;
case 55:

      if ($$[$0].condition === 'OR') {
        $$[$0].rules.unshift($$[$0-2]);
        $$[$0-2] = $$[$0].rules;
      } else {
        if ($$[$0].rules.length === 1) $$[$0] = $$[$0].rules[0];
        $$[$0-2] = [$$[$0-2], $$[$0]];
      }
      this.$ = { condition: 'OR', rules: $$[$0-2] };
    
break;
case 57:

      if ($$[$0-1].type === 'Term' && $$[$0-1].value) {
        $$[$0-1] = $$[$0-1].value;
      }
      if ($$[$0].value && $$[$0].value.type && $$[$0].value.value) {
        $$[$0].value = $$[$0].value.value;
      }
      if ($$[$0].type === 'RhsIs') {
        if (!$$[$0].value || $$[$0].value.type == 'null') {
          this.$ = { operator: $$[$0].not ? 'is_not_null' : 'is_null', id: $$[$0-1] };
        } else {
          this.$ = { operator: $$[$0].not ? 'is_not' : 'is', id: $$[$0-1], value: $$[$0].value };
        }
      } else if ($$[$0].type === 'RhsLike') {
        if ($$[$0].value[0] === '%') {
          this.$ = { operator: $$[$0].not ? 'not_ends_with' : 'ends_with', id: $$[$0-1], value: $$[$0].value };
        } else if ($$[$0].value.substring(-1) === '%') {
          this.$ = { operator: $$[$0].not ? 'not_begins_with' : 'begins_with', id: $$[$0-1], value: $$[$0].value };
        } else {
          this.$ = { operator: $$[$0].not ? 'not_contains' : 'contains', id: $$[$0-1], value: $$[$0].value };
        }
      } else if ($$[$0].type === 'RhsBetween') {
        if ($$[$0].left.type && $$[$0].left.value) {
          $$[$0].left = $$[$0].left.value;
        }
        if ($$[$0].right.type && $$[$0].right.value) {
          $$[$0].right = $$[$0].right.value;
        }
        this.$ = { operator: $$[$0].not ? 'not_between' : 'between', id: $$[$0-1], value: [$$[$0].left, $$[$0].right] };
      } else if ($$[$0].type === 'RhsInExpressionList') {
        this.$ = { operator: $$[$0].not ? 'not_in' : 'in', id: $$[$0-1], value: $$[$0].value };
      } else if ($$[$0].op) {
        this.$ = { operator: $$[$0].op, id: $$[$0-1], value: $$[$0].value };
      } else {
        this.$ = { type: 'BinaryCondition', left: $$[$0-1], right: $$[$0] };
      }
    
break;
case 58:
 this.$ = {type: 'ExistsCondition', value: $$[$0-1]}; 
break;
case 59:
 this.$ = {type: 'NotCondition', value: $$[$0]}; 
break;
case 60:
 this.$ = 'equal'; 
break;
case 61: case 62:
 this.$ = 'not_equal'; 
break;
case 63:
 this.$ = 'greater'; 
break;
case 64:
 this.$ = 'greater_or_equal'; 
break;
case 65:
 this.$ = 'less'; 
break;
case 66:
 this.$ = 'less_or_equal'; 
break;
case 72:
 this.$ = {type: 'RhsCompare', op: $$[$0-1], value: $$[$0] }; 
break;
case 73: case 74: case 75:
 this.$ = {type: 'RhsCompareSub', op:$$[$0-4], kind: $$[$0-3], value: $$[$0-1] }; 
break;
case 76:
 this.$ = {type: 'RhsIs', value: $$[$0]}; 
break;
case 77:
 this.$ = {type: 'RhsIs', value: $$[$0], not:1}; 
break;
case 78:
 this.$ = {type: 'RhsIs', value: $$[$0], distinctFrom:1}; 
break;
case 79:
 this.$ = {type: 'RhsIs', value: $$[$0], not:1, distinctFrom:1}; 
break;
case 80:
 this.$ = { type: 'RhsInSelect', value: $$[$0-1] }; 
break;
case 81:
 this.$ = { type: 'RhsInSelect', value: $$[$0-1], not:1 }; 
break;
case 82:
 this.$ = { type: 'RhsInExpressionList', value: $$[$0-1] }; 
break;
case 83:
 this.$ = { type: 'RhsInExpressionList', value: $$[$0-1], not:1 }; 
break;
case 93:
 this.$ = {type: 'RhsLike', value: $$[$0]}; 
break;
case 94:
 this.$ = {type: 'RhsLike', value: $$[$0], not:1}; 
break;
case 95:
 this.$ = {type: 'RhsBetween', left: $$[$0-2], right: $$[$0]}; 
break;
case 96:
 this.$ = {type: 'RhsBetween', left: $$[$0-2], right: $$[$0], not:1}; 
break;
case 98:
 this.$ = {type:'Operand', left:$$[$0-2], right:$$[$0], op:$$[$0-1]}; 
break;
case 100: case 101:
 this.$ = {type:'Summand', left:$$[$0-2], right:$$[$0], op:$$[$0-1]}; 
break;
case 103: case 104: case 105:
 this.$ = {type:'Factor', left:$$[$0-2], right:$$[$0], op:$$[$0-1]}; 
break;
case 107: case 108:
 this.$ = {type: 'Term', value: $$[$0]}; 
break;
case 109: case 110:
 this.$ = {type: 'Term', value: $$[$0].substring(1, $$[$0].length - 1)}; 
break;
case 113: case 114:
 this.$ = {type: 'call', name: $$[$0-3], args: $$[$0-1]}; 
break;
case 115:
 this.$ = {type:'case', clauses: $$[$0-2], else: $$[$0-1]}; 
break;
case 116:
 this.$ = $$[$0-4]; $$[$0-4].push({when: $$[$0-2], then: $$[$0]}); 
break;
case 117:
 this.$ = [{when: $$[$0-2], then: $$[$0]}]; 
break;
case 120:
 this.$ = {type: 'string', value: $$[$0]}; 
break;
case 121:
 this.$ = {type: 'number', value: $$[$0]}; 
break;
case 122:
 this.$ = {type: 'param', name: $$[$0].substring(1)}; 
break;
case 123:
 this.$ = {type: 'boolean', value: $$[$0]}; 
break;
case 124:
 this.$ = {type: 'null'}; 
break;
}
},
table: [{3:1,4:2,6:$V0},{1:[3]},{5:[1,4]},o($V1,[2,3],{7:5,16:[1,6]}),{1:[2,1]},{8:7,18:11,23:$V2,35:8,36:$V3,37:$V4,45:$V5,46:$V6,47:$V7,48:$V8,49:$V9,59:12,62:13,64:$Va,65:$Vb,89:16,91:17,94:18,97:19,98:24,99:$Vc,106:$Vd,107:$Ve,108:$Vf,109:$Vg},o($V1,[2,4]),{9:[1,32],24:[1,33]},o($Vh,[2,25]),o($Vh,[2,27]),o($Vh,[2,28]),o($Vh,$Vi,{38:34,45:$Vj,51:$Vk}),o($Vl,[2,53],{60:[1,37],61:[1,38]}),o($Vm,[2,56],{63:39,74:41,75:42,76:43,77:44,78:45,66:46,65:[1,49],67:[1,52],68:[1,53],69:[1,54],70:[1,55],71:[1,56],72:[1,57],73:[1,58],82:[1,47],83:[1,48],87:[1,50],88:[1,51],90:$Vn}),{49:[1,59]},{23:$V2,45:$V5,46:$V6,47:$V7,48:$V8,49:$V9,59:60,62:13,64:$Va,65:$Vb,89:16,91:17,94:18,97:19,98:24,99:$Vc,106:$Vd,107:$Ve,108:$Vf,109:$Vg},o($Vo,[2,97],{92:$Vp,93:$Vq}),o($Vr,[2,99],{36:$Vs,95:$Vt,96:$Vu}),o($Vv,[2,102]),o($Vv,[2,106]),o($Vv,[2,107],{49:[1,66]}),o($Vv,[2,108],{49:[1,67]}),o($Vv,[2,109]),o($Vv,[2,110]),o($Vv,[2,111]),{18:68,23:$V2,45:$V5,46:$V6,47:$V7,48:$V8,49:$V9,59:12,62:13,64:$Va,65:$Vb,89:16,91:17,94:18,97:19,98:24,99:$Vc,106:$Vd,107:$Ve,108:$Vf,109:$Vg},o($Vv,[2,120]),o($Vv,[2,121]),o($Vv,[2,122]),o($Vv,[2,123]),o($Vv,[2,124]),{100:69,103:[1,70]},{10:71,39:72,40:73,44:74,45:$Vw,46:$Vx,47:$Vy,48:$Vz,49:$VA},{18:11,23:$V2,35:80,36:$V3,37:$V4,45:$V5,46:$V6,47:$V7,48:$V8,49:$V9,59:12,62:13,64:$Va,65:$Vb,89:16,91:17,94:18,97:19,98:24,99:$Vc,106:$Vd,107:$Ve,108:$Vf,109:$Vg},o($Vh,[2,29]),o($VB,[2,42]),{45:[1,81]},{18:82,23:$V2,45:$V5,46:$V6,47:$V7,48:$V8,49:$V9,59:12,62:13,64:$Va,65:$Vb,89:16,91:17,94:18,97:19,98:24,99:$Vc,106:$Vd,107:$Ve,108:$Vf,109:$Vg},{18:83,23:$V2,45:$V5,46:$V6,47:$V7,48:$V8,49:$V9,59:12,62:13,64:$Va,65:$Vb,89:16,91:17,94:18,97:19,98:24,99:$Vc,106:$Vd,107:$Ve,108:$Vf,109:$Vg},o($Vm,[2,57]),{23:$V2,45:$V5,46:$V6,47:$V7,48:$V8,49:$V9,89:84,91:17,94:18,97:19,98:24,99:$Vc,106:$Vd,107:$Ve,108:$Vf,109:$Vg},o($Vm,[2,67]),o($Vm,[2,68]),o($Vm,[2,69]),o($Vm,[2,70]),o($Vm,[2,71]),{23:$V2,45:$V5,46:$V6,47:$V7,48:$V8,49:$V9,62:85,79:[1,86],80:[1,87],81:[1,88],89:16,91:17,94:18,97:19,98:24,99:$Vc,106:$Vd,107:$Ve,108:$Vf,109:$Vg},{16:[1,91],23:$V2,45:$V5,46:$V6,47:$V7,48:$V8,49:$V9,62:89,65:[1,90],89:16,91:17,94:18,97:19,98:24,99:$Vc,106:$Vd,107:$Ve,108:$Vf,109:$Vg},{49:[1,92]},{83:[1,93],87:[1,94],88:[1,95]},{23:$V2,45:$V5,46:$V6,47:$V7,48:$V8,49:$V9,62:96,89:16,91:17,94:18,97:19,98:24,99:$Vc,106:$Vd,107:$Ve,108:$Vf,109:$Vg},{23:$V2,45:$V5,46:$V6,47:$V7,48:$V8,49:$V9,62:97,89:16,91:17,94:18,97:19,98:24,99:$Vc,106:$Vd,107:$Ve,108:$Vf,109:$Vg},o($VC,[2,60]),o($VC,[2,61]),o($VC,[2,62]),o($VC,[2,63]),o($VC,[2,64]),o($VC,[2,65]),o($VC,[2,66]),{4:98,6:$V0},o($Vm,[2,59]),{23:$V2,45:$V5,46:$V6,47:$V7,48:$V8,49:$V9,91:99,94:18,97:19,98:24,99:$Vc,106:$Vd,107:$Ve,108:$Vf,109:$Vg},{23:$V2,45:$V5,46:$V6,47:$V7,48:$V8,49:$V9,91:100,94:18,97:19,98:24,99:$Vc,106:$Vd,107:$Ve,108:$Vf,109:$Vg},{23:$V2,45:$V5,46:$V6,47:$V7,48:$V8,49:$V9,94:101,97:19,98:24,99:$Vc,106:$Vd,107:$Ve,108:$Vf,109:$Vg},{23:$V2,45:$V5,46:$V6,47:$V7,48:$V8,49:$V9,94:102,97:19,98:24,99:$Vc,106:$Vd,107:$Ve,108:$Vf,109:$Vg},{23:$V2,45:$V5,46:$V6,47:$V7,48:$V8,49:$V9,94:103,97:19,98:24,99:$Vc,106:$Vd,107:$Ve,108:$Vf,109:$Vg},{18:107,23:$V2,36:$VD,37:$VE,45:$V5,46:$V6,47:$V7,48:$V8,49:$V9,50:$VF,59:12,62:13,64:$Va,65:$Vb,84:106,85:105,86:104,89:16,91:17,94:18,97:19,98:24,99:$Vc,106:$Vd,107:$Ve,108:$Vf,109:$Vg},{18:107,23:$V2,36:$VD,37:$VE,45:$V5,46:$V6,47:$V7,48:$V8,49:$V9,50:$VF,59:12,62:13,64:$Va,65:$Vb,84:106,85:105,86:110,89:16,91:17,94:18,97:19,98:24,99:$Vc,106:$Vd,107:$Ve,108:$Vf,109:$Vg},{50:[1,111]},{101:112,102:[2,118],103:[1,113],105:[1,114]},{18:115,23:$V2,45:$V5,46:$V6,47:$V7,48:$V8,49:$V9,59:12,62:13,64:$Va,65:$Vb,89:16,91:17,94:18,97:19,98:24,99:$Vc,106:$Vd,107:$Ve,108:$Vf,109:$Vg},o($VG,[2,5],{11:116,17:[1,118],24:[1,117]}),o($VH,[2,30],{41:119,42:$VI,52:$VJ,54:$VK,55:$VL,56:$VM,57:$VN,58:$VO}),o($VP,[2,32]),o($VQ,$Vi,{38:126,45:$Vj,51:$Vk}),o($VR,[2,36]),o($VR,[2,37]),o($VR,[2,38]),o($VR,[2,39]),{4:127,6:$V0},o($Vh,[2,26]),o($VB,[2,43]),o($Vl,[2,54]),o($Vl,[2,55]),o($Vo,[2,98],{92:$Vp,93:$Vq}),o($Vm,[2,72],{90:$Vn}),{49:[1,128]},{49:[1,129]},{49:[1,130]},o($Vm,[2,76],{90:$Vn}),{16:[1,132],23:$V2,45:$V5,46:$V6,47:$V7,48:$V8,49:$V9,62:131,89:16,91:17,94:18,97:19,98:24,99:$Vc,106:$Vd,107:$Ve,108:$Vf,109:$Vg},{9:[1,133]},{4:134,6:$V0,18:136,20:135,23:$V2,45:$V5,46:$V6,47:$V7,48:$V8,49:$V9,59:12,62:13,64:$Va,65:$Vb,89:16,91:17,94:18,97:19,98:24,99:$Vc,106:$Vd,107:$Ve,108:$Vf,109:$Vg},{49:[1,137]},{23:$V2,45:$V5,46:$V6,47:$V7,48:$V8,49:$V9,62:138,89:16,91:17,94:18,97:19,98:24,99:$Vc,106:$Vd,107:$Ve,108:$Vf,109:$Vg},{23:$V2,45:$V5,46:$V6,47:$V7,48:$V8,49:$V9,62:139,89:16,91:17,94:18,97:19,98:24,99:$Vc,106:$Vd,107:$Ve,108:$Vf,109:$Vg},o($Vm,[2,93],{90:$Vn}),{60:[1,140],90:$Vn},{50:[1,141]},o($Vr,[2,100],{36:$Vs,95:$Vt,96:$Vu}),o($Vr,[2,101],{36:$Vs,95:$Vt,96:$Vu}),o($Vv,[2,103]),o($Vv,[2,104]),o($Vv,[2,105]),{50:[1,142]},{24:[1,143],50:[2,92]},o($VS,[2,90]),o($VS,[2,86]),o($VS,[2,87]),o($VS,[2,88]),{50:[1,144]},o($Vv,[2,112]),{102:[1,145]},{18:146,23:$V2,45:$V5,46:$V6,47:$V7,48:$V8,49:$V9,59:12,62:13,64:$Va,65:$Vb,89:16,91:17,94:18,97:19,98:24,99:$Vc,106:$Vd,107:$Ve,108:$Vf,109:$Vg},{18:147,23:$V2,45:$V5,46:$V6,47:$V7,48:$V8,49:$V9,59:12,62:13,64:$Va,65:$Vb,89:16,91:17,94:18,97:19,98:24,99:$Vc,106:$Vd,107:$Ve,108:$Vf,109:$Vg},{104:[1,148]},o($VT,[2,7],{12:149,19:[1,150]}),{39:151,40:73,44:74,45:$Vw,46:$Vx,47:$Vy,48:$Vz,49:$VA},{18:152,23:$V2,45:$V5,46:$V6,47:$V7,48:$V8,49:$V9,59:12,62:13,64:$Va,65:$Vb,89:16,91:17,94:18,97:19,98:24,99:$Vc,106:$Vd,107:$Ve,108:$Vf,109:$Vg},{42:[1,153]},{42:[2,45],53:[1,154]},{42:[2,47],53:[1,155]},{42:[2,49]},{42:[2,50]},{42:[2,51]},{42:[2,52]},o($VQ,[2,35]),{50:[1,156]},{4:157,6:$V0},{4:158,6:$V0},{4:159,6:$V0},o($Vm,[2,77],{90:$Vn}),{9:[1,160]},{23:$V2,45:$V5,46:$V6,47:$V7,48:$V8,49:$V9,62:161,89:16,91:17,94:18,97:19,98:24,99:$Vc,106:$Vd,107:$Ve,108:$Vf,109:$Vg},{50:[1,162]},{24:$VU,50:[1,163]},o($VV,[2,85]),{4:165,6:$V0,18:136,20:166,23:$V2,45:$V5,46:$V6,47:$V7,48:$V8,49:$V9,59:12,62:13,64:$Va,65:$Vb,89:16,91:17,94:18,97:19,98:24,99:$Vc,106:$Vd,107:$Ve,108:$Vf,109:$Vg},o($Vm,[2,94],{90:$Vn}),{60:[1,167],90:$Vn},{23:$V2,45:$V5,46:$V6,47:$V7,48:$V8,49:$V9,62:168,89:16,91:17,94:18,97:19,98:24,99:$Vc,106:$Vd,107:$Ve,108:$Vf,109:$Vg},o($Vm,[2,58]),o($Vv,[2,113]),{18:107,23:$V2,36:$VD,37:$VE,45:$V5,46:$V6,47:$V7,48:$V8,49:$V9,59:12,62:13,64:$Va,65:$Vb,84:169,89:16,91:17,94:18,97:19,98:24,99:$Vc,106:$Vd,107:$Ve,108:$Vf,109:$Vg},o($Vv,[2,114]),o($Vv,[2,115]),{104:[1,170]},{102:[2,119]},{18:171,23:$V2,45:$V5,46:$V6,47:$V7,48:$V8,49:$V9,59:12,62:13,64:$Va,65:$Vb,89:16,91:17,94:18,97:19,98:24,99:$Vc,106:$Vd,107:$Ve,108:$Vf,109:$Vg},o($VW,[2,9],{13:172,21:[1,173]}),{18:136,20:174,23:$V2,45:$V5,46:$V6,47:$V7,48:$V8,49:$V9,59:12,62:13,64:$Va,65:$Vb,89:16,91:17,94:18,97:19,98:24,99:$Vc,106:$Vd,107:$Ve,108:$Vf,109:$Vg},o($VH,[2,31],{41:119,42:$VI,52:$VJ,54:$VK,55:$VL,56:$VM,57:$VN,58:$VO}),o($VG,[2,6]),{40:175,44:74,45:$Vw,46:$Vx,47:$Vy,48:$Vz,49:$VA},{42:[2,46]},{42:[2,48]},o($VR,[2,40]),{50:[1,176]},{50:[1,177]},{50:[1,178]},{23:$V2,45:$V5,46:$V6,47:$V7,48:$V8,49:$V9,62:179,89:16,91:17,94:18,97:19,98:24,99:$Vc,106:$Vd,107:$Ve,108:$Vf,109:$Vg},o($Vm,[2,78],{90:$Vn}),o($Vm,[2,80]),o($Vm,[2,82]),{18:180,23:$V2,45:$V5,46:$V6,47:$V7,48:$V8,49:$V9,59:12,62:13,64:$Va,65:$Vb,89:16,91:17,94:18,97:19,98:24,99:$Vc,106:$Vd,107:$Ve,108:$Vf,109:$Vg},{50:[1,181]},{24:$VU,50:[1,182]},{23:$V2,45:$V5,46:$V6,47:$V7,48:$V8,49:$V9,62:183,89:16,91:17,94:18,97:19,98:24,99:$Vc,106:$Vd,107:$Ve,108:$Vf,109:$Vg},o($Vm,[2,95],{90:$Vn}),o($VS,[2,89]),{18:184,23:$V2,45:$V5,46:$V6,47:$V7,48:$V8,49:$V9,59:12,62:13,64:$Va,65:$Vb,89:16,91:17,94:18,97:19,98:24,99:$Vc,106:$Vd,107:$Ve,108:$Vf,109:$Vg},o($VX,[2,117]),o($VY,[2,14],{14:185,25:[1,186]}),{18:187,23:$V2,45:$V5,46:$V6,47:$V7,48:$V8,49:$V9,59:12,62:13,64:$Va,65:$Vb,89:16,91:17,94:18,97:19,98:24,99:$Vc,106:$Vd,107:$Ve,108:$Vf,109:$Vg},o($VT,[2,8],{24:$VU}),o($VP,[2,33],{43:[1,188]}),o($Vm,[2,73]),o($Vm,[2,74]),o($Vm,[2,75]),o($Vm,[2,79],{90:$Vn}),o($VV,[2,84]),o($Vm,[2,81]),o($Vm,[2,83]),o($Vm,[2,96],{90:$Vn}),o($VX,[2,116]),o($VZ,[2,11],{15:189,22:[1,190]}),{18:193,23:$V2,26:191,27:192,45:$V5,46:$V6,47:$V7,48:$V8,49:$V9,59:12,62:13,64:$Va,65:$Vb,89:16,91:17,94:18,97:19,98:24,99:$Vc,106:$Vd,107:$Ve,108:$Vf,109:$Vg},o($VW,[2,10]),{18:194,23:$V2,45:$V5,46:$V6,47:$V7,48:$V8,49:$V9,59:12,62:13,64:$Va,65:$Vb,89:16,91:17,94:18,97:19,98:24,99:$Vc,106:$Vd,107:$Ve,108:$Vf,109:$Vg},o($VZ,[2,2]),{23:[1,195]},o($VY,[2,15],{24:[1,196]}),o($V_,[2,17]),o($V$,[2,19],{28:197,30:[1,198],31:[1,199]}),o($VP,[2,34]),o($VZ,[2,13],{24:[1,200]}),{18:193,23:$V2,27:201,45:$V5,46:$V6,47:$V7,48:$V8,49:$V9,59:12,62:13,64:$Va,65:$Vb,89:16,91:17,94:18,97:19,98:24,99:$Vc,106:$Vd,107:$Ve,108:$Vf,109:$Vg},o($V_,[2,22],{29:202,32:[1,203]}),o($V$,[2,20]),o($V$,[2,21]),{23:[1,204]},o($V_,[2,16]),o($V_,[2,18]),{33:[1,205],34:[1,206]},o($VZ,[2,12]),o($V_,[2,23]),o($V_,[2,24])],
defaultActions: {4:[2,1],122:[2,49],123:[2,50],124:[2,51],125:[2,52],147:[2,119],154:[2,46],155:[2,48]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        function _parseError (msg, hash) {
            this.message = msg;
            this.hash = hash;
        }
        _parseError.prototype = Error;

        throw new _parseError(str, hash);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 46
break;
case 1:return 48
break;
case 2:return 37
break;
case 3:/* skip whitespace */
break;
case 4:return 6
break;
case 5:return 9
break;
case 6:return 17
break;
case 7:return 16
break;
case 8:return 88
break;
case 9:return 19
break;
case 10:return 21
break;
case 11:return 22
break;
case 12:return 25
break;
case 13:return 24
break;
case 14:return 92
break;
case 15:return 93
break;
case 16:return 95
break;
case 17:return 36
break;
case 18:return 96
break;
case 19:return 67
break;
case 20:return 68
break;
case 21:return 69
break;
case 22:return 71
break;
case 23:return 70
break;
case 24:return 73
break;
case 25:return 72
break;
case 26:return 49
break;
case 27:return 50
break;
case 28:return 90
break;
case 29:return 51
break;
case 30:return 79
break;
case 31:return 80
break;
case 32:return 81
break;
case 33:return 64
break;
case 34:return 82
break;
case 35:return 83
break;
case 36:return 43
break;
case 37:return 60
break;
case 38:return 61
break;
case 39:return 65
break;
case 40:return 56
break;
case 41:return 53
break;
case 42:return 42
break;
case 43:return 52
break;
case 44:return 54
break;
case 45:return 55
break;
case 46:return 58
break;
case 47:return 57
break;
case 48:return 99
break;
case 49:return 103
break;
case 50:return 104
break;
case 51:return 105
break;
case 52:return 102
break;
case 53:return 87
break;
case 54:return 30
break;
case 55:return 31
break;
case 56:return 32
break;
case 57:return 33
break;
case 58:return 34
break;
case 59:return 106
break;
case 60:return 109
break;
case 61:return 108
break;
case 62:return 107
break;
case 63:return 23
break;
case 64:return 45
break;
case 65:return 47
break;
case 66:return 5
break;
case 67:return 'INVALID'
break;
}
},
rules: [/^(?:[a-zA-Z_][a-zA-Z0-9_]*\.[a-zA-Z_][a-zA-Z0-9_]*)/i,/^(?:\[[a-zA-Z_][a-zA-Z0-9_]*\]\.\[[a-zA-Z_][a-zA-Z0-9_]*\])/i,/^(?:[a-zA-Z_][a-zA-Z0-9_]*\.\*)/i,/^(?:\s+)/i,/^(?:SELECT\b)/i,/^(?:FROM\b)/i,/^(?:WHERE\b)/i,/^(?:DISTINCT\b)/i,/^(?:BETWEEN\b)/i,/^(?:GROUP BY\b)/i,/^(?:HAVING\b)/i,/^(?:LIMIT\b)/i,/^(?:ORDER BY\b)/i,/^(?:,)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\/)/i,/^(?:\*)/i,/^(?:%)/i,/^(?:=)/i,/^(?:!=)/i,/^(?:<>)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\|\|)/i,/^(?:AS\b)/i,/^(?:ALL\b)/i,/^(?:ANY\b)/i,/^(?:SOME\b)/i,/^(?:EXISTS\b)/i,/^(?:IS\b)/i,/^(?:IN\b)/i,/^(?:ON\b)/i,/^(?:AND\b)/i,/^(?:OR\b)/i,/^(?:NOT\b)/i,/^(?:INNER\b)/i,/^(?:OUTER\b)/i,/^(?:JOIN\b)/i,/^(?:LEFT\b)/i,/^(?:RIGHT\b)/i,/^(?:FULL\b)/i,/^(?:NATURAL\b)/i,/^(?:CROSS\b)/i,/^(?:CASE\b)/i,/^(?:WHEN\b)/i,/^(?:THEN\b)/i,/^(?:ELSE\b)/i,/^(?:END\b)/i,/^(?:LIKE\b)/i,/^(?:ASC\b)/i,/^(?:DESC\b)/i,/^(?:NULLS\b)/i,/^(?:FIRST\b)/i,/^(?:LAST\b)/i,/^(?:['](\\.|[^'])*['])/i,/^(?:NULL\b)/i,/^(?:(true|false))/i,/^(?::[a-zA-Z_][a-zA-Z0-9_]*)/i,/^(?:[0-9]+(\.[0-9]+)?)/i,/^(?:[a-zA-Z_][a-zA-Z0-9_]*)/i,/^(?:\[[a-zA-Z_][a-zA-Z0-9_]*\])/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}
// browser support
if (typeof window !== 'undefined') {
  window.escuelle = parser.parse.bind(parser);
}
