/* parser generated by jison 0.4.17 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,3],$V1=[23,36,37,45,46,47,63,64,98,105,106,107,108],$V2=[1,26],$V3=[1,9],$V4=[1,10],$V5=[1,21],$V6=[1,22],$V7=[1,24],$V8=[1,15],$V9=[1,16],$Va=[1,30],$Vb=[1,25],$Vc=[1,27],$Vd=[1,28],$Ve=[1,29],$Vf=[9,24],$Vg=[2,39],$Vh=[1,35],$Vi=[1,36],$Vj=[1,34],$Vk=[5,9,17,19,21,22,24,25,30,31,32,42,45,48,49,50,52,53,54,55,56,58,101,102,103,104],$Vl=[1,37],$Vm=[5,9,17,19,21,22,24,25,30,31,32,42,45,48,49,50,52,53,54,55,56,58,60,101,102,103,104],$Vn=[1,39],$Vo=[5,9,17,19,21,22,24,25,30,31,32,42,45,48,49,50,52,53,54,55,56,58,60,64,66,67,68,69,70,71,72,81,82,86,87,89,101,102,103,104],$Vp=[1,60],$Vq=[1,61],$Vr=[5,9,17,19,21,22,24,25,30,31,32,42,45,48,49,50,52,53,54,55,56,58,60,64,66,67,68,69,70,71,72,81,82,86,87,89,91,92,101,102,103,104],$Vs=[1,63],$Vt=[1,62],$Vu=[1,64],$Vv=[5,9,17,19,21,22,24,25,30,31,32,36,42,45,48,49,50,52,53,54,55,56,58,60,64,66,67,68,69,70,71,72,81,82,86,87,89,91,92,94,95,101,102,103,104],$Vw=[1,74],$Vx=[1,75],$Vy=[1,76],$Vz=[5,9,17,19,21,22,24,25,42,43,48,50,52,53,54,55,56],$VA=[23,45,46,47,78,79,80,98,105,106,107,108],$VB=[1,105],$VC=[1,106],$VD=[2,90],$VE=[5,19,21,22,25,48],$VF=[5,17,19,21,22,24,25,48],$VG=[2,42],$VH=[1,117],$VI=[1,118],$VJ=[1,119],$VK=[1,120],$VL=[1,121],$VM=[1,122],$VN=[5,17,19,21,22,24,25,42,48,50,52,53,54,55,56],$VO=[5,17,19,21,22,24,25,42,43,48,50,52,53,54,55,56],$VP=[5,17,19,21,22,24,25,42,43,45,48,49,50,52,53,54,55,56],$VQ=[24,48],$VR=[5,21,22,25,48],$VS=[1,161],$VT=[5,21,22,24,25,48],$VU=[5,22,25,48],$VV=[101,102,104],$VW=[5,22,48],$VX=[5,48],$VY=[5,22,24,48],$VZ=[5,22,24,32,48];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"main":3,"selectClause":4,"EOF":5,"SELECT":6,"optDistinct":7,"selectExprList":8,"FROM":9,"tableExprList":10,"optWhereClause":11,"optGroupByClause":12,"optHavingClause":13,"optOrderByClause":14,"optLimitClause":15,"DISTINCT":16,"WHERE":17,"expression":18,"GROUP_BY":19,"commaSepExpressionList":20,"HAVING":21,"LIMIT":22,"NUMERIC":23,"COMMA":24,"ORDER_BY":25,"orderByList":26,"orderByListItem":27,"optOrderByOrder":28,"optOrderByNulls":29,"ASC":30,"DESC":31,"NULLS":32,"FIRST":33,"LAST":34,"selectExpr":35,"STAR":36,"QUALIFIED_STAR":37,"optTableExprAlias":38,"tableExpr":39,"joinComponent":40,"optJoinModifier":41,"JOIN":42,"ON":43,"tableExprPart":44,"IDENTIFIER":45,"QUALIFIED_IDENTIFIER":46,"LPAREN":47,"RPAREN":48,"AS":49,"LEFT":50,"OUTER":51,"RIGHT":52,"FULL":53,"INNER":54,"CROSS":55,"NATURAL":56,"andCondition":57,"LOGICAL_OR":58,"condition":59,"LOGICAL_AND":60,"operand":61,"conditionRightHandSide":62,"EXISTS":63,"LOGICAL_NOT":64,"compare":65,"CMP_EQUALS":66,"CMP_NOTEQUALS":67,"CMP_NOTEQUALS_BASIC":68,"CMP_GREATER":69,"CMP_GREATEROREQUAL":70,"CMP_LESS":71,"CMP_LESSOREQUAL":72,"rhsCompareTest":73,"rhsIsTest":74,"rhsInTest":75,"rhsLikeTest":76,"rhsBetweenTest":77,"ALL":78,"ANY":79,"SOME":80,"IS":81,"IN":82,"functionParam":83,"functionExpressionList":84,"optFunctionExpressionList":85,"LIKE":86,"BETWEEN":87,"summand":88,"CONCAT":89,"factor":90,"PLUS":91,"MINUS":92,"term":93,"DIVIDE":94,"MODULO":95,"value":96,"caseWhen":97,"CASE":98,"caseWhenList":99,"optCaseWhenElse":100,"END":101,"WHEN":102,"THEN":103,"ELSE":104,"STRING":105,"PARAMETER":106,"BOOLEAN":107,"NULL":108,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",6:"SELECT",9:"FROM",16:"DISTINCT",17:"WHERE",19:"GROUP_BY",21:"HAVING",22:"LIMIT",23:"NUMERIC",24:"COMMA",25:"ORDER_BY",30:"ASC",31:"DESC",32:"NULLS",33:"FIRST",34:"LAST",36:"STAR",37:"QUALIFIED_STAR",42:"JOIN",43:"ON",45:"IDENTIFIER",46:"QUALIFIED_IDENTIFIER",47:"LPAREN",48:"RPAREN",49:"AS",50:"LEFT",51:"OUTER",52:"RIGHT",53:"FULL",54:"INNER",55:"CROSS",56:"NATURAL",58:"LOGICAL_OR",60:"LOGICAL_AND",63:"EXISTS",64:"LOGICAL_NOT",66:"CMP_EQUALS",67:"CMP_NOTEQUALS",68:"CMP_NOTEQUALS_BASIC",69:"CMP_GREATER",70:"CMP_GREATEROREQUAL",71:"CMP_LESS",72:"CMP_LESSOREQUAL",78:"ALL",79:"ANY",80:"SOME",81:"IS",82:"IN",86:"LIKE",87:"BETWEEN",89:"CONCAT",91:"PLUS",92:"MINUS",94:"DIVIDE",95:"MODULO",98:"CASE",101:"END",102:"WHEN",103:"THEN",104:"ELSE",105:"STRING",106:"PARAMETER",107:"BOOLEAN",108:"NULL"},
productions_: [0,[3,2],[4,10],[7,0],[7,1],[11,0],[11,2],[12,0],[12,2],[13,0],[13,2],[15,0],[15,4],[15,2],[14,0],[14,2],[26,3],[26,1],[27,3],[28,0],[28,1],[28,1],[29,0],[29,2],[29,2],[8,1],[8,3],[35,1],[35,1],[35,2],[10,1],[10,3],[39,1],[39,4],[39,6],[40,2],[44,1],[44,1],[44,3],[38,0],[38,1],[38,2],[41,0],[41,1],[41,2],[41,1],[41,2],[41,1],[41,1],[41,1],[41,1],[18,1],[18,3],[57,1],[57,3],[59,1],[59,2],[59,4],[59,2],[65,1],[65,1],[65,1],[65,1],[65,1],[65,1],[65,1],[62,1],[62,1],[62,1],[62,1],[62,1],[73,2],[73,5],[73,5],[73,5],[74,2],[74,3],[74,4],[74,5],[75,4],[75,5],[75,4],[75,5],[20,3],[20,1],[83,1],[83,1],[83,1],[84,3],[84,1],[85,0],[85,1],[76,2],[76,3],[77,4],[77,5],[61,1],[61,3],[88,1],[88,3],[88,3],[90,1],[90,3],[90,3],[90,3],[93,1],[93,1],[93,1],[93,1],[93,3],[93,4],[93,4],[97,4],[99,5],[99,4],[100,0],[100,2],[96,1],[96,1],[96,1],[96,1],[96,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return $$[$0-1]; 
break;
case 2:

        this.$ = {
          type: 'select',
          distinct: !!$$[$0-9],
          columns: $$[$0-7],
          from: $$[$0-5],
          where:$$[$0-4],
          group:$$[$0-3],
          having:$$[$0-2],
          order:$$[$0-1],
          limit: $$[$0]
        };
      
break;
case 3: case 21:
 this.$ = false; 
break;
case 4: case 19: case 20:
 this.$ = true; 
break;
case 5: case 7: case 9: case 11: case 14: case 39: case 90: case 115:
 this.$ = null; 
break;
case 6: case 8: case 10: case 15: case 36: case 37: case 59: case 60: case 61: case 62: case 63: case 64: case 65: case 66: case 67: case 68: case 69: case 70: case 85: case 86: case 87: case 91: case 96: case 98: case 101: case 105: case 108: case 116:
 this.$ = $$[$0]; 
break;
case 12:
 this.$ = [parseInt($$[$0-2]), parseInt($$[$0])]; 
break;
case 13:
 this.$ = [0, parseInt($$[$0])]; 
break;
case 16: case 26: case 31: case 54: case 83: case 88:
 this.$ = $$[$0-2]; $$[$0-2].push($$[$0]); 
break;
case 17: case 25: case 30: case 53: case 84: case 89:
 this.$ = [$$[$0]]; 
break;
case 18:
 this.$ = {expr:$$[$0-2], orderAsc: $$[$0-1], orderByNulls: $$[$0]}; 
break;
case 22:
 this.$ = '';
break;
case 23:
 this.$ = 'NULLS FIRST'; 
break;
case 24:
 this.$ = 'NULLS LAST'; 
break;
case 27:
 this.$ = {type: 'column', value:'*'}; 
break;
case 28:
 this.$ = {type: 'column', value:$$[$0]}; 
break;
case 29:
 this.$ = {type: 'column', value:$$[$0-1], alias:$$[$0]}; 
break;
case 32:
 this.$ = {type:'table', value: $$[$0], join: []}; 
break;
case 33:
 this.$ = $$[$0-3]; $$[$0-3].join.push({type:'table', value: $$[$0], modifier:$$[$0-2]}); 
break;
case 34:
 this.$ = $$[$0-5]; $$[$0-5].join.push({type:'table', value: $$[$0-2], modifier:$$[$0-4], expr:$$[$0]}); 
break;
case 35:
 this.$ = {name: $$[$0-1], alias: $$[$0]}; 
break;
case 38:
 this.$ = $$[$0-1]; 
break;
case 40:
 this.$ = {value: $$[$0] }; 
break;
case 41:
 this.$ = {value: $$[$0], alias: 1}; 
break;
case 42:
 this.$ = ''; 
break;
case 43:
 this.$ = 'LEFT'; 
break;
case 44:
 this.$ = 'LEFT OUTER'; 
break;
case 45:
 this.$ = 'RIGHT'; 
break;
case 46:
 this.$ = 'RIGHT OUTER'; 
break;
case 47:
 this.$ = 'FULL'; 
break;
case 48:
 this.$ = 'INNER'; 
break;
case 49:
 this.$ = 'CROSS'; 
break;
case 50:
 this.$ = 'NATURAL'; 
break;
case 51:
 this.$ = {type:'and', value: $$[$0]}; 
break;
case 52:
 this.$ = {type:'or', left: $$[$0-2], right: $$[$0]}; 
break;
case 55:
 this.$ = {type: 'Condition', value: $$[$0]}; 
break;
case 56:
 this.$ = {type: 'BinaryCondition', left: $$[$0-1], right: $$[$0]}; 
break;
case 57:
 this.$ = {type: 'ExistsCondition', value: $$[$0-1]}; 
break;
case 58:
 this.$ = {type: 'NotCondition', value: $$[$0]}; 
break;
case 71:
 this.$ = {type: 'RhsCompare', op: $$[$0-1], value: $$[$0] }; 
break;
case 72: case 73: case 74:
 this.$ = {type: 'RhsCompareSub', op:$$[$0-4], kind: $$[$0-3], value: $$[$0-1] }; 
break;
case 75:
 this.$ = {type: 'RhsIs', value: $$[$0]}; 
break;
case 76:
 this.$ = {type: 'RhsIs', value: $$[$0], not:1}; 
break;
case 77:
 this.$ = {type: 'RhsIs', value: $$[$0], distinctFrom:1}; 
break;
case 78:
 this.$ = {type: 'RhsIs', value: $$[$0], not:1, distinctFrom:1}; 
break;
case 79:
 this.$ = { type: 'RhsInSelect', value: $$[$0-1] }; 
break;
case 80:
 this.$ = { type: 'RhsInSelect', value: $$[$0-1], not:1 }; 
break;
case 81:
 this.$ = { type: 'RhsInExpressionList', value: $$[$0-1] }; 
break;
case 82:
 this.$ = { type: 'RhsInExpressionList', value: $$[$0-1], not:1 }; 
break;
case 92:
 this.$ = {type: 'RhsLike', value: $$[$0]}; 
break;
case 93:
 this.$ = {type: 'RhsLike', value: $$[$0], not:1}; 
break;
case 94:
 this.$ = {type: 'RhsBetween', left: $$[$0-2], right: $$[$0]}; 
break;
case 95:
 this.$ = {type: 'RhsBetween', left: $$[$0-2], right: $$[$0], not:1}; 
break;
case 97:
 this.$ = {type:'Operand', left:$$[$0-2], right:$$[$0], op:$$[$0-1]}; 
break;
case 99: case 100:
 this.$ = {type:'Summand', left:$$[$0-2], right:$$[$0], op:$$[$0-1]}; 
break;
case 102: case 103: case 104:
 this.$ = {type:'Factor', left:$$[$0-2], right:$$[$0], op:$$[$0-1]}; 
break;
case 106: case 107:
 this.$ = {type: 'Term', value: $$[$0]}; 
break;
case 109:
 this.$ = {type: 'Term', value: $$[$0-1]}; 
break;
case 110: case 111:
 this.$ = {type: 'call', name: $$[$0-3], args: $$[$0-1]}; 
break;
case 112:
 this.$ = {type:'case', clauses: $$[$0-2], else: $$[$0-1]}; 
break;
case 113:
 this.$ = $$[$0-4]; $$[$0-4].push({when: $$[$0-2], then: $$[$0]}); 
break;
case 114:
 this.$ = [{when: $$[$0-2], then: $$[$0]}]; 
break;
case 117:
 this.$ = {type: 'string', value: $$[$0]}; 
break;
case 118:
 this.$ = {type: 'number', value: $$[$0]}; 
break;
case 119:
 this.$ = {type: 'param', name: $$[$0].substring(1)}; 
break;
case 120:
 this.$ = {type: 'boolean', value: $$[$0]}; 
break;
case 121:
 this.$ = {type: 'null'}; 
break;
}
},
table: [{3:1,4:2,6:$V0},{1:[3]},{5:[1,4]},o($V1,[2,3],{7:5,16:[1,6]}),{1:[2,1]},{8:7,18:11,23:$V2,35:8,36:$V3,37:$V4,45:$V5,46:$V6,47:$V7,57:12,59:13,61:14,63:$V8,64:$V9,88:17,90:18,93:19,96:20,97:23,98:$Va,105:$Vb,106:$Vc,107:$Vd,108:$Ve},o($V1,[2,4]),{9:[1,31],24:[1,32]},o($Vf,[2,25]),o($Vf,[2,27]),o($Vf,[2,28]),o($Vf,$Vg,{38:33,45:$Vh,49:$Vi,58:$Vj}),o($Vk,[2,51],{60:$Vl}),o($Vm,[2,53]),o($Vm,[2,55],{62:38,73:40,74:41,75:42,76:43,77:44,65:45,64:[1,48],66:[1,51],67:[1,52],68:[1,53],69:[1,54],70:[1,55],71:[1,56],72:[1,57],81:[1,46],82:[1,47],86:[1,49],87:[1,50],89:$Vn}),{47:[1,58]},{23:$V2,45:$V5,46:$V6,47:$V7,59:59,61:14,63:$V8,64:$V9,88:17,90:18,93:19,96:20,97:23,98:$Va,105:$Vb,106:$Vc,107:$Vd,108:$Ve},o($Vo,[2,96],{91:$Vp,92:$Vq}),o($Vr,[2,98],{36:$Vs,94:$Vt,95:$Vu}),o($Vv,[2,101]),o($Vv,[2,105]),o($Vv,[2,106],{47:[1,65]}),o($Vv,[2,107],{47:[1,66]}),o($Vv,[2,108]),{18:67,23:$V2,45:$V5,46:$V6,47:$V7,57:12,59:13,61:14,63:$V8,64:$V9,88:17,90:18,93:19,96:20,97:23,98:$Va,105:$Vb,106:$Vc,107:$Vd,108:$Ve},o($Vv,[2,117]),o($Vv,[2,118]),o($Vv,[2,119]),o($Vv,[2,120]),o($Vv,[2,121]),{99:68,102:[1,69]},{10:70,39:71,40:72,44:73,45:$Vw,46:$Vx,47:$Vy},{18:11,23:$V2,35:77,36:$V3,37:$V4,45:$V5,46:$V6,47:$V7,57:12,59:13,61:14,63:$V8,64:$V9,88:17,90:18,93:19,96:20,97:23,98:$Va,105:$Vb,106:$Vc,107:$Vd,108:$Ve},o($Vf,[2,29]),{23:$V2,45:$V5,46:$V6,47:$V7,57:78,59:13,61:14,63:$V8,64:$V9,88:17,90:18,93:19,96:20,97:23,98:$Va,105:$Vb,106:$Vc,107:$Vd,108:$Ve},o($Vz,[2,40]),{45:[1,79]},{23:$V2,45:$V5,46:$V6,47:$V7,59:80,61:14,63:$V8,64:$V9,88:17,90:18,93:19,96:20,97:23,98:$Va,105:$Vb,106:$Vc,107:$Vd,108:$Ve},o($Vm,[2,56]),{23:$V2,45:$V5,46:$V6,47:$V7,88:81,90:18,93:19,96:20,97:23,98:$Va,105:$Vb,106:$Vc,107:$Vd,108:$Ve},o($Vm,[2,66]),o($Vm,[2,67]),o($Vm,[2,68]),o($Vm,[2,69]),o($Vm,[2,70]),{23:$V2,45:$V5,46:$V6,47:$V7,61:82,78:[1,83],79:[1,84],80:[1,85],88:17,90:18,93:19,96:20,97:23,98:$Va,105:$Vb,106:$Vc,107:$Vd,108:$Ve},{16:[1,88],23:$V2,45:$V5,46:$V6,47:$V7,61:86,64:[1,87],88:17,90:18,93:19,96:20,97:23,98:$Va,105:$Vb,106:$Vc,107:$Vd,108:$Ve},{47:[1,89]},{82:[1,90],86:[1,91],87:[1,92]},{23:$V2,45:$V5,46:$V6,47:$V7,61:93,88:17,90:18,93:19,96:20,97:23,98:$Va,105:$Vb,106:$Vc,107:$Vd,108:$Ve},{23:$V2,45:$V5,46:$V6,47:$V7,61:94,88:17,90:18,93:19,96:20,97:23,98:$Va,105:$Vb,106:$Vc,107:$Vd,108:$Ve},o($VA,[2,59]),o($VA,[2,60]),o($VA,[2,61]),o($VA,[2,62]),o($VA,[2,63]),o($VA,[2,64]),o($VA,[2,65]),{4:95,6:$V0},o($Vm,[2,58]),{23:$V2,45:$V5,46:$V6,47:$V7,90:96,93:19,96:20,97:23,98:$Va,105:$Vb,106:$Vc,107:$Vd,108:$Ve},{23:$V2,45:$V5,46:$V6,47:$V7,90:97,93:19,96:20,97:23,98:$Va,105:$Vb,106:$Vc,107:$Vd,108:$Ve},{23:$V2,45:$V5,46:$V6,47:$V7,93:98,96:20,97:23,98:$Va,105:$Vb,106:$Vc,107:$Vd,108:$Ve},{23:$V2,45:$V5,46:$V6,47:$V7,93:99,96:20,97:23,98:$Va,105:$Vb,106:$Vc,107:$Vd,108:$Ve},{23:$V2,45:$V5,46:$V6,47:$V7,93:100,96:20,97:23,98:$Va,105:$Vb,106:$Vc,107:$Vd,108:$Ve},{18:104,23:$V2,36:$VB,37:$VC,45:$V5,46:$V6,47:$V7,48:$VD,57:12,59:13,61:14,63:$V8,64:$V9,83:103,84:102,85:101,88:17,90:18,93:19,96:20,97:23,98:$Va,105:$Vb,106:$Vc,107:$Vd,108:$Ve},{18:104,23:$V2,36:$VB,37:$VC,45:$V5,46:$V6,47:$V7,48:$VD,57:12,59:13,61:14,63:$V8,64:$V9,83:103,84:102,85:107,88:17,90:18,93:19,96:20,97:23,98:$Va,105:$Vb,106:$Vc,107:$Vd,108:$Ve},{48:[1,108],58:$Vj},{100:109,101:[2,115],102:[1,110],104:[1,111]},{18:112,23:$V2,45:$V5,46:$V6,47:$V7,57:12,59:13,61:14,63:$V8,64:$V9,88:17,90:18,93:19,96:20,97:23,98:$Va,105:$Vb,106:$Vc,107:$Vd,108:$Ve},o($VE,[2,5],{11:113,17:[1,115],24:[1,114]}),o($VF,[2,30],{41:116,42:$VG,50:$VH,52:$VI,53:$VJ,54:$VK,55:$VL,56:$VM}),o($VN,[2,32]),o($VO,$Vg,{38:123,45:$Vh,49:$Vi}),o($VP,[2,36]),o($VP,[2,37]),{4:124,6:$V0},o($Vf,[2,26]),o($Vk,[2,52],{60:$Vl}),o($Vz,[2,41]),o($Vm,[2,54]),o($Vo,[2,97],{91:$Vp,92:$Vq}),o($Vm,[2,71],{89:$Vn}),{47:[1,125]},{47:[1,126]},{47:[1,127]},o($Vm,[2,75],{89:$Vn}),{16:[1,129],23:$V2,45:$V5,46:$V6,47:$V7,61:128,88:17,90:18,93:19,96:20,97:23,98:$Va,105:$Vb,106:$Vc,107:$Vd,108:$Ve},{9:[1,130]},{4:131,6:$V0,18:133,20:132,23:$V2,45:$V5,46:$V6,47:$V7,57:12,59:13,61:14,63:$V8,64:$V9,88:17,90:18,93:19,96:20,97:23,98:$Va,105:$Vb,106:$Vc,107:$Vd,108:$Ve},{47:[1,134]},{23:$V2,45:$V5,46:$V6,47:$V7,61:135,88:17,90:18,93:19,96:20,97:23,98:$Va,105:$Vb,106:$Vc,107:$Vd,108:$Ve},{23:$V2,45:$V5,46:$V6,47:$V7,61:136,88:17,90:18,93:19,96:20,97:23,98:$Va,105:$Vb,106:$Vc,107:$Vd,108:$Ve},o($Vm,[2,92],{89:$Vn}),{60:[1,137],89:$Vn},{48:[1,138]},o($Vr,[2,99],{36:$Vs,94:$Vt,95:$Vu}),o($Vr,[2,100],{36:$Vs,94:$Vt,95:$Vu}),o($Vv,[2,102]),o($Vv,[2,103]),o($Vv,[2,104]),{48:[1,139]},{24:[1,140],48:[2,91]},o($VQ,[2,89]),o($VQ,[2,85],{58:$Vj}),o($VQ,[2,86]),o($VQ,[2,87]),{48:[1,141]},o($Vv,[2,109]),{101:[1,142]},{18:143,23:$V2,45:$V5,46:$V6,47:$V7,57:12,59:13,61:14,63:$V8,64:$V9,88:17,90:18,93:19,96:20,97:23,98:$Va,105:$Vb,106:$Vc,107:$Vd,108:$Ve},{18:144,23:$V2,45:$V5,46:$V6,47:$V7,57:12,59:13,61:14,63:$V8,64:$V9,88:17,90:18,93:19,96:20,97:23,98:$Va,105:$Vb,106:$Vc,107:$Vd,108:$Ve},{58:$Vj,103:[1,145]},o($VR,[2,7],{12:146,19:[1,147]}),{39:148,40:72,44:73,45:$Vw,46:$Vx,47:$Vy},{18:149,23:$V2,45:$V5,46:$V6,47:$V7,57:12,59:13,61:14,63:$V8,64:$V9,88:17,90:18,93:19,96:20,97:23,98:$Va,105:$Vb,106:$Vc,107:$Vd,108:$Ve},{42:[1,150]},{42:[2,43],51:[1,151]},{42:[2,45],51:[1,152]},{42:[2,47]},{42:[2,48]},{42:[2,49]},{42:[2,50]},o($VO,[2,35]),{48:[1,153]},{4:154,6:$V0},{4:155,6:$V0},{4:156,6:$V0},o($Vm,[2,76],{89:$Vn}),{9:[1,157]},{23:$V2,45:$V5,46:$V6,47:$V7,61:158,88:17,90:18,93:19,96:20,97:23,98:$Va,105:$Vb,106:$Vc,107:$Vd,108:$Ve},{48:[1,159]},{24:$VS,48:[1,160]},o($VT,[2,84],{58:$Vj}),{4:162,6:$V0,18:133,20:163,23:$V2,45:$V5,46:$V6,47:$V7,57:12,59:13,61:14,63:$V8,64:$V9,88:17,90:18,93:19,96:20,97:23,98:$Va,105:$Vb,106:$Vc,107:$Vd,108:$Ve},o($Vm,[2,93],{89:$Vn}),{60:[1,164],89:$Vn},{23:$V2,45:$V5,46:$V6,47:$V7,61:165,88:17,90:18,93:19,96:20,97:23,98:$Va,105:$Vb,106:$Vc,107:$Vd,108:$Ve},o($Vm,[2,57]),o($Vv,[2,110]),{18:104,23:$V2,36:$VB,37:$VC,45:$V5,46:$V6,47:$V7,57:12,59:13,61:14,63:$V8,64:$V9,83:166,88:17,90:18,93:19,96:20,97:23,98:$Va,105:$Vb,106:$Vc,107:$Vd,108:$Ve},o($Vv,[2,111]),o($Vv,[2,112]),{58:$Vj,103:[1,167]},{58:$Vj,101:[2,116]},{18:168,23:$V2,45:$V5,46:$V6,47:$V7,57:12,59:13,61:14,63:$V8,64:$V9,88:17,90:18,93:19,96:20,97:23,98:$Va,105:$Vb,106:$Vc,107:$Vd,108:$Ve},o($VU,[2,9],{13:169,21:[1,170]}),{18:133,20:171,23:$V2,45:$V5,46:$V6,47:$V7,57:12,59:13,61:14,63:$V8,64:$V9,88:17,90:18,93:19,96:20,97:23,98:$Va,105:$Vb,106:$Vc,107:$Vd,108:$Ve},o($VF,[2,31],{41:116,42:$VG,50:$VH,52:$VI,53:$VJ,54:$VK,55:$VL,56:$VM}),o($VE,[2,6],{58:$Vj}),{40:172,44:73,45:$Vw,46:$Vx,47:$Vy},{42:[2,44]},{42:[2,46]},o($VP,[2,38]),{48:[1,173]},{48:[1,174]},{48:[1,175]},{23:$V2,45:$V5,46:$V6,47:$V7,61:176,88:17,90:18,93:19,96:20,97:23,98:$Va,105:$Vb,106:$Vc,107:$Vd,108:$Ve},o($Vm,[2,77],{89:$Vn}),o($Vm,[2,79]),o($Vm,[2,81]),{18:177,23:$V2,45:$V5,46:$V6,47:$V7,57:12,59:13,61:14,63:$V8,64:$V9,88:17,90:18,93:19,96:20,97:23,98:$Va,105:$Vb,106:$Vc,107:$Vd,108:$Ve},{48:[1,178]},{24:$VS,48:[1,179]},{23:$V2,45:$V5,46:$V6,47:$V7,61:180,88:17,90:18,93:19,96:20,97:23,98:$Va,105:$Vb,106:$Vc,107:$Vd,108:$Ve},o($Vm,[2,94],{89:$Vn}),o($VQ,[2,88]),{18:181,23:$V2,45:$V5,46:$V6,47:$V7,57:12,59:13,61:14,63:$V8,64:$V9,88:17,90:18,93:19,96:20,97:23,98:$Va,105:$Vb,106:$Vc,107:$Vd,108:$Ve},o($VV,[2,114],{58:$Vj}),o($VW,[2,14],{14:182,25:[1,183]}),{18:184,23:$V2,45:$V5,46:$V6,47:$V7,57:12,59:13,61:14,63:$V8,64:$V9,88:17,90:18,93:19,96:20,97:23,98:$Va,105:$Vb,106:$Vc,107:$Vd,108:$Ve},o($VR,[2,8],{24:$VS}),o($VN,[2,33],{43:[1,185]}),o($Vm,[2,72]),o($Vm,[2,73]),o($Vm,[2,74]),o($Vm,[2,78],{89:$Vn}),o($VT,[2,83],{58:$Vj}),o($Vm,[2,80]),o($Vm,[2,82]),o($Vm,[2,95],{89:$Vn}),o($VV,[2,113],{58:$Vj}),o($VX,[2,11],{15:186,22:[1,187]}),{18:190,23:$V2,26:188,27:189,45:$V5,46:$V6,47:$V7,57:12,59:13,61:14,63:$V8,64:$V9,88:17,90:18,93:19,96:20,97:23,98:$Va,105:$Vb,106:$Vc,107:$Vd,108:$Ve},o($VU,[2,10],{58:$Vj}),{18:191,23:$V2,45:$V5,46:$V6,47:$V7,57:12,59:13,61:14,63:$V8,64:$V9,88:17,90:18,93:19,96:20,97:23,98:$Va,105:$Vb,106:$Vc,107:$Vd,108:$Ve},o($VX,[2,2]),{23:[1,192]},o($VW,[2,15],{24:[1,193]}),o($VY,[2,17]),o($VZ,[2,19],{28:194,30:[1,195],31:[1,196],58:$Vj}),o($VN,[2,34],{58:$Vj}),o($VX,[2,13],{24:[1,197]}),{18:190,23:$V2,27:198,45:$V5,46:$V6,47:$V7,57:12,59:13,61:14,63:$V8,64:$V9,88:17,90:18,93:19,96:20,97:23,98:$Va,105:$Vb,106:$Vc,107:$Vd,108:$Ve},o($VY,[2,22],{29:199,32:[1,200]}),o($VZ,[2,20]),o($VZ,[2,21]),{23:[1,201]},o($VY,[2,16]),o($VY,[2,18]),{33:[1,202],34:[1,203]},o($VX,[2,12]),o($VY,[2,23]),o($VY,[2,24])],
defaultActions: {4:[2,1],119:[2,47],120:[2,48],121:[2,49],122:[2,50],151:[2,44],152:[2,46]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        function _parseError (msg, hash) {
            this.message = msg;
            this.hash = hash;
        }
        _parseError.prototype = Error;

        throw new _parseError(str, hash);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 46
break;
case 1:return 37
break;
case 2:/* skip whitespace */
break;
case 3:return 6
break;
case 4:return 9
break;
case 5:return 17
break;
case 6:return 16
break;
case 7:return 87
break;
case 8:return 19
break;
case 9:return 21
break;
case 10:return 22
break;
case 11:return 25
break;
case 12:return 24
break;
case 13:return 91
break;
case 14:return 92
break;
case 15:return 94
break;
case 16:return 36
break;
case 17:return 95
break;
case 18:return 66
break;
case 19:return 67
break;
case 20:return 68
break;
case 21:return 70
break;
case 22:return 69
break;
case 23:return 72
break;
case 24:return 71
break;
case 25:return 47
break;
case 26:return 48
break;
case 27:return 89
break;
case 28:return 49
break;
case 29:return 78
break;
case 30:return 79
break;
case 31:return 80
break;
case 32:return 63
break;
case 33:return 81
break;
case 34:return 82
break;
case 35:return 43
break;
case 36:return 60
break;
case 37:return 58
break;
case 38:return 64
break;
case 39:return 54
break;
case 40:return 51
break;
case 41:return 42
break;
case 42:return 50
break;
case 43:return 52
break;
case 44:return 53
break;
case 45:return 56
break;
case 46:return 55
break;
case 47:return 98
break;
case 48:return 102
break;
case 49:return 103
break;
case 50:return 104
break;
case 51:return 101
break;
case 52:return 86
break;
case 53:return 30
break;
case 54:return 31
break;
case 55:return 32
break;
case 56:return 33
break;
case 57:return 34
break;
case 58:return 105
break;
case 59:return 108
break;
case 60:return 107
break;
case 61:return 106
break;
case 62:return 23
break;
case 63:return 45
break;
case 64:return 5
break;
case 65:return 'INVALID'
break;
}
},
rules: [/^(?:[a-zA-Z_][a-zA-Z0-9_]*\.[a-zA-Z_][a-zA-Z0-9_]*)/i,/^(?:[a-zA-Z_][a-zA-Z0-9_]*\.\*)/i,/^(?:\s+)/i,/^(?:SELECT\b)/i,/^(?:FROM\b)/i,/^(?:WHERE\b)/i,/^(?:DISTINCT\b)/i,/^(?:BETWEEN\b)/i,/^(?:GROUP BY\b)/i,/^(?:HAVING\b)/i,/^(?:LIMIT\b)/i,/^(?:ORDER BY\b)/i,/^(?:,)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\/)/i,/^(?:\*)/i,/^(?:%)/i,/^(?:=)/i,/^(?:!=)/i,/^(?:<>)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\|\|)/i,/^(?:AS\b)/i,/^(?:ALL\b)/i,/^(?:ANY\b)/i,/^(?:SOME\b)/i,/^(?:EXISTS\b)/i,/^(?:IS\b)/i,/^(?:IN\b)/i,/^(?:ON\b)/i,/^(?:AND\b)/i,/^(?:OR\b)/i,/^(?:NOT\b)/i,/^(?:INNER\b)/i,/^(?:OUTER\b)/i,/^(?:JOIN\b)/i,/^(?:LEFT\b)/i,/^(?:RIGHT\b)/i,/^(?:FULL\b)/i,/^(?:NATURAL\b)/i,/^(?:CROSS\b)/i,/^(?:CASE\b)/i,/^(?:WHEN\b)/i,/^(?:THEN\b)/i,/^(?:ELSE\b)/i,/^(?:END\b)/i,/^(?:LIKE\b)/i,/^(?:ASC\b)/i,/^(?:DESC\b)/i,/^(?:NULLS\b)/i,/^(?:FIRST\b)/i,/^(?:LAST\b)/i,/^(?:['](\\.|[^'])*['])/i,/^(?:NULL\b)/i,/^(?:(true|false))/i,/^(?::[a-zA-Z_][a-zA-Z0-9_]*)/i,/^(?:[0-9]+(\.[0-9]+)?)/i,/^(?:[a-zA-Z_][a-zA-Z0-9_]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}
// browser support
if (typeof window !== 'undefined') {
  window.escuelle = parser.parse.bind(parser);
}
