/* parser generated by jison 0.4.15 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,3],$V1=[1,7],$V2=[1,8],$V3=[1,19],$V4=[1,20],$V5=[1,22],$V6=[1,13],$V7=[1,14],$V8=[1,27],$V9=[1,23],$Va=[1,24],$Vb=[1,25],$Vc=[1,26],$Vd=[8,21],$Ve=[2,34],$Vf=[1,32],$Vg=[1,33],$Vh=[1,31],$Vi=[5,8,14,16,18,19,21,25,26,27,37,40,43,44,45,47,48,49,50,51,53,97,98,99,100],$Vj=[1,34],$Vk=[5,8,14,16,18,19,21,25,26,27,37,40,43,44,45,47,48,49,50,51,53,55,97,98,99,100],$Vl=[1,36],$Vm=[5,8,14,16,18,19,21,25,26,27,37,40,43,44,45,47,48,49,50,51,53,55,59,61,62,63,64,65,66,67,76,78,82,83,85,97,98,99,100],$Vn=[1,57],$Vo=[1,58],$Vp=[5,8,14,16,18,19,21,25,26,27,37,40,43,44,45,47,48,49,50,51,53,55,59,61,62,63,64,65,66,67,76,78,82,83,85,87,88,97,98,99,100],$Vq=[1,60],$Vr=[1,59],$Vs=[1,61],$Vt=[5,8,14,16,18,19,21,25,26,27,31,37,40,43,44,45,47,48,49,50,51,53,55,59,61,62,63,64,65,66,67,76,78,82,83,85,87,88,90,91,97,98,99,100],$Vu=[1,71],$Vv=[1,72],$Vw=[1,73],$Vx=[5,8,14,16,18,19,21,37,38,43,45,47,48,49,50,51],$Vy=[40,41,42,73,74,75,94,101,102,103,104],$Vz=[1,102],$VA=[1,103],$VB=[2,85],$VC=[5,16,18,19,43],$VD=[5,14,16,18,19,21,43],$VE=[2,37],$VF=[1,114],$VG=[1,115],$VH=[1,116],$VI=[1,117],$VJ=[1,118],$VK=[1,119],$VL=[5,14,16,18,19,21,37,43,45,47,48,49,50,51],$VM=[5,14,16,18,19,21,37,38,43,45,47,48,49,50,51],$VN=[5,14,16,18,19,21,37,38,40,43,44,45,47,48,49,50,51],$VO=[21,43],$VP=[5,18,19,43],$VQ=[1,158],$VR=[5,18,19,21,43],$VS=[5,19,43],$VT=[97,98,100],$VU=[5,43],$VV=[5,21,43],$VW=[5,21,27,43];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"main":3,"selectClause":4,"EOF":5,"SELECT":6,"selectExprList":7,"FROM":8,"tableExprList":9,"optWhereClause":10,"optGroupByClause":11,"optHavingClause":12,"optOrderByClause":13,"WHERE":14,"expression":15,"GROUP_BY":16,"commaSepExpressionList":17,"HAVING":18,"ORDER_BY":19,"orderByList":20,"COMMA":21,"orderByListItem":22,"optOrderByOrder":23,"optOrderByNulls":24,"ASC":25,"DESC":26,"NULLS":27,"FIRST":28,"LAST":29,"selectExpr":30,"STAR":31,"QUALIFIED_STAR":32,"optTableExprAlias":33,"tableExpr":34,"joinComponent":35,"optJoinModifier":36,"JOIN":37,"ON":38,"tableExprPart":39,"IDENTIFIER":40,"QUALIFIED_IDENTIFIER":41,"LPAREN":42,"RPAREN":43,"AS":44,"LEFT":45,"OUTER":46,"RIGHT":47,"FULL":48,"INNER":49,"CROSS":50,"NATURAL":51,"andCondition":52,"LOGICAL_OR":53,"condition":54,"LOGICAL_AND":55,"operand":56,"conditionRightHandSide":57,"EXISTS":58,"LOGICAL_NOT":59,"compare":60,"CMP_EQUALS":61,"CMP_NOTEQUALS":62,"CMP_NOTEQUALS_BASIC":63,"CMP_GREATER":64,"CMP_GREATEROREQUAL":65,"CMP_LESS":66,"CMP_LESSOREQUAL":67,"rhsCompareTest":68,"rhsIsTest":69,"rhsInTest":70,"rhsLikeTest":71,"rhsBetweenTest":72,"ALL":73,"ANY":74,"SOME":75,"IS":76,"DISTINCT":77,"IN":78,"functionParam":79,"functionExpressionList":80,"optFunctionExpressionList":81,"LIKE":82,"BETWEEN":83,"summand":84,"CONCAT":85,"factor":86,"PLUS":87,"MINUS":88,"term":89,"DIVIDE":90,"MODULO":91,"value":92,"caseWhen":93,"CASE":94,"caseWhenList":95,"optCaseWhenElse":96,"END":97,"WHEN":98,"THEN":99,"ELSE":100,"STRING":101,"NUMERIC":102,"BOOLEAN":103,"NULL":104,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",6:"SELECT",8:"FROM",14:"WHERE",16:"GROUP_BY",18:"HAVING",19:"ORDER_BY",21:"COMMA",25:"ASC",26:"DESC",27:"NULLS",28:"FIRST",29:"LAST",31:"STAR",32:"QUALIFIED_STAR",37:"JOIN",38:"ON",40:"IDENTIFIER",41:"QUALIFIED_IDENTIFIER",42:"LPAREN",43:"RPAREN",44:"AS",45:"LEFT",46:"OUTER",47:"RIGHT",48:"FULL",49:"INNER",50:"CROSS",51:"NATURAL",53:"LOGICAL_OR",55:"LOGICAL_AND",58:"EXISTS",59:"LOGICAL_NOT",61:"CMP_EQUALS",62:"CMP_NOTEQUALS",63:"CMP_NOTEQUALS_BASIC",64:"CMP_GREATER",65:"CMP_GREATEROREQUAL",66:"CMP_LESS",67:"CMP_LESSOREQUAL",73:"ALL",74:"ANY",75:"SOME",76:"IS",77:"DISTINCT",78:"IN",82:"LIKE",83:"BETWEEN",85:"CONCAT",87:"PLUS",88:"MINUS",90:"DIVIDE",91:"MODULO",94:"CASE",97:"END",98:"WHEN",99:"THEN",100:"ELSE",101:"STRING",102:"NUMERIC",103:"BOOLEAN",104:"NULL"},
productions_: [0,[3,2],[4,8],[10,0],[10,2],[11,0],[11,2],[12,0],[12,2],[13,0],[13,2],[20,3],[20,1],[22,3],[23,0],[23,1],[23,1],[24,0],[24,2],[24,2],[7,1],[7,3],[30,1],[30,1],[30,2],[9,1],[9,3],[34,1],[34,4],[34,6],[35,2],[39,1],[39,1],[39,3],[33,0],[33,1],[33,2],[36,0],[36,1],[36,2],[36,1],[36,2],[36,1],[36,1],[36,1],[36,1],[15,1],[15,3],[52,1],[52,3],[54,1],[54,2],[54,4],[54,2],[60,1],[60,1],[60,1],[60,1],[60,1],[60,1],[60,1],[57,1],[57,1],[57,1],[57,1],[57,1],[68,2],[68,5],[68,5],[68,5],[69,2],[69,3],[69,4],[69,5],[70,4],[70,5],[70,4],[70,5],[17,3],[17,1],[79,1],[79,1],[79,1],[80,3],[80,1],[81,0],[81,1],[71,2],[71,3],[72,4],[72,5],[56,1],[56,3],[84,1],[84,3],[84,3],[86,1],[86,3],[86,3],[86,3],[89,1],[89,1],[89,1],[89,1],[89,3],[89,4],[89,4],[93,4],[95,5],[95,4],[96,0],[96,2],[92,1],[92,1],[92,1],[92,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return $$[$0-1]; 
break;
case 2:
 this.$ = {nodeType: 'Select', columns: $$[$0-6], from: $$[$0-4], where:$$[$0-3], groupBy:$$[$0-2], having:$$[$0-1], orderBy:$$[$0]}; 
break;
case 3: case 5: case 7: case 9: case 34: case 85: case 110:
 this.$ = null; 
break;
case 4: case 6: case 8: case 10: case 31: case 32: case 54: case 55: case 56: case 57: case 58: case 59: case 60: case 61: case 62: case 63: case 64: case 65: case 80: case 81: case 82: case 86: case 91: case 93: case 96: case 103: case 111: case 112: case 113: case 114: case 115:
 this.$ = $$[$0]; 
break;
case 11: case 21: case 26: case 49: case 78: case 83:
 this.$ = $$[$0-2]; $$[$0-2].push($$[$0]); 
break;
case 12: case 20: case 25: case 48: case 79: case 84:
 this.$ = [$$[$0]]; 
break;
case 13:
 this.$ = {expression:$$[$0-2], orderAsc: $$[$0-1], orderByNulls: $$[$0]}; 
break;
case 14: case 15:
 this.$ = true; 
break;
case 16:
 this.$ = false; 
break;
case 17:
 this.$ = '';
break;
case 18:
 this.$ = 'NULLS FIRST'; 
break;
case 19:
 this.$ = 'NULLS LAST'; 
break;
case 22:
 this.$ = {nodeType: 'Column', value:'*'}; 
break;
case 23:
 this.$ = {nodeType: 'Column', value:$$[$0]}; 
break;
case 24:
 this.$ = {nodeType: 'Column', value:$$[$0-1], alias:$$[$0]}; 
break;
case 27:
 this.$ = {nodeType:'TableExpr', value: [$$[$0]]}; 
break;
case 28:
 this.$ = $$[$0-3]; $$[$0-3].value.push({nodeType:'TableExpr', value: $$[$0], modifier:$$[$0-2]}); 
break;
case 29:
 this.$ = $$[$0-5]; $$[$0-5].value.push({nodeType:'TableExpr', value: $$[$0-2], modifier:$$[$0-4], expression:$$[$0]}); 
break;
case 30:
 this.$ = {exprName: $$[$0-1], alias: $$[$0]}; 
break;
case 33:
 this.$ = $$[$0-1]; 
break;
case 35:
 this.$ = {value: $$[$0] }; 
break;
case 36:
 this.$ = {value: $$[$0], includeAs: 1}; 
break;
case 37:
 this.$ = ''; 
break;
case 38:
 this.$ = 'LEFT'; 
break;
case 39:
 this.$ = 'LEFT OUTER'; 
break;
case 40:
 this.$ = 'RIGHT'; 
break;
case 41:
 this.$ = 'RIGHT OUTER'; 
break;
case 42:
 this.$ = 'FULL'; 
break;
case 43:
 this.$ = 'INNER'; 
break;
case 44:
 this.$ = 'CROSS'; 
break;
case 45:
 this.$ = 'NATURAL'; 
break;
case 46:
 this.$ = {nodeType:'AndCondition', value: $$[$0]}; 
break;
case 47:
 this.$ = {nodeType:'OrCondition', left: $$[$0-2], right: $$[$0]}; 
break;
case 50:
 this.$ = {nodeType: 'Condition', value: $$[$0]}; 
break;
case 51:
 this.$ = {nodeType: 'BinaryCondition', left: $$[$0-1], right: $$[$0]}; 
break;
case 52:
 this.$ = {nodeType: 'ExistsCondition', value: $$[$0-1]}; 
break;
case 53:
 this.$ = {nodeType: 'NotCondition', value: $$[$0]}; 
break;
case 66:
 this.$ = {nodeType: 'RhsCompare', op: $$[$0-1], value: $$[$0] }; 
break;
case 67: case 68: case 69:
 this.$ = {nodeType: 'RhsCompareSub', op:$$[$0-4], kind: $$[$0-3], value: $$[$0-1] }; 
break;
case 70:
 this.$ = {nodeType: 'RhsIs', value: $$[$0]}; 
break;
case 71:
 this.$ = {nodeType: 'RhsIs', value: $$[$0], not:1}; 
break;
case 72:
 this.$ = {nodeType: 'RhsIs', value: $$[$0], distinctFrom:1}; 
break;
case 73:
 this.$ = {nodeType: 'RhsIs', value: $$[$0], not:1, distinctFrom:1}; 
break;
case 74:
 this.$ = { nodeType: 'RhsInSelect', value: $$[$0-1] }; 
break;
case 75:
 this.$ = { nodeType: 'RhsInSelect', value: $$[$0-1], not:1 }; 
break;
case 76:
 this.$ = { nodeType: 'RhsInExpressionList', value: $$[$0-1] }; 
break;
case 77:
 this.$ = { nodeType: 'RhsInExpressionList', value: $$[$0-1], not:1 }; 
break;
case 87:
 this.$ = {nodeType: 'RhsLike', value: $$[$0]}; 
break;
case 88:
 this.$ = {nodeType: 'RhsLike', value: $$[$0], not:1}; 
break;
case 89:
 this.$ = {nodeType: 'RhsBetween', left: $$[$0-2], right: $$[$0]}; 
break;
case 90:
 this.$ = {nodeType: 'RhsBetween', left: $$[$0-2], right: $$[$0], not:1}; 
break;
case 92:
 this.$ = {nodeType:'Operand', left:$$[$0-2], right:$$[$0], op:$$[$0-1]}; 
break;
case 94: case 95:
 this.$ = {nodeType:'Summand', left:$$[$0-2], right:$$[$0], op:$$[$0-1]}; 
break;
case 97: case 98: case 99:
 this.$ = {nodeType:'Factor', left:$$[$0-2], right:$$[$0], op:$$[$0-1]}; 
break;
case 100: case 101: case 102:
 this.$ = {nodeType: 'Term', value: $$[$0]}; 
break;
case 104:
 this.$ = {nodeType: 'Term', value: $$[$0-1]}; 
break;
case 105: case 106:
 this.$ = {nodeType: 'FunctionCall', name: $$[$0-3], args: $$[$0-1]}; 
break;
case 107:
 this.$ = {nodeType:'Case', clauses: $$[$0-2], else: $$[$0-1]}; 
break;
case 108:
 this.$ = $$[$0-4]; $$[$0-4].push({nodeType: 'CaseItem', when: $$[$0-2], then: $$[$0]}); 
break;
case 109:
 this.$ = [{nodeType: 'CaseItem', when: $$[$0-2], then: $$[$0]}]; 
break;
}
},
table: [{3:1,4:2,6:$V0},{1:[3]},{5:[1,4]},{7:5,15:9,30:6,31:$V1,32:$V2,40:$V3,41:$V4,42:$V5,52:10,54:11,56:12,58:$V6,59:$V7,84:15,86:16,89:17,92:18,93:21,94:$V8,101:$V9,102:$Va,103:$Vb,104:$Vc},{1:[2,1]},{8:[1,28],21:[1,29]},o($Vd,[2,20]),o($Vd,[2,22]),o($Vd,[2,23]),o($Vd,$Ve,{33:30,40:$Vf,44:$Vg,53:$Vh}),o($Vi,[2,46],{55:$Vj}),o($Vk,[2,48]),o($Vk,[2,50],{57:35,68:37,69:38,70:39,71:40,72:41,60:42,59:[1,45],61:[1,48],62:[1,49],63:[1,50],64:[1,51],65:[1,52],66:[1,53],67:[1,54],76:[1,43],78:[1,44],82:[1,46],83:[1,47],85:$Vl}),{42:[1,55]},{40:$V3,41:$V4,42:$V5,54:56,56:12,58:$V6,59:$V7,84:15,86:16,89:17,92:18,93:21,94:$V8,101:$V9,102:$Va,103:$Vb,104:$Vc},o($Vm,[2,91],{87:$Vn,88:$Vo}),o($Vp,[2,93],{31:$Vq,90:$Vr,91:$Vs}),o($Vt,[2,96]),o($Vt,[2,100]),o($Vt,[2,101],{42:[1,62]}),o($Vt,[2,102],{42:[1,63]}),o($Vt,[2,103]),{15:64,40:$V3,41:$V4,42:$V5,52:10,54:11,56:12,58:$V6,59:$V7,84:15,86:16,89:17,92:18,93:21,94:$V8,101:$V9,102:$Va,103:$Vb,104:$Vc},o($Vt,[2,112]),o($Vt,[2,113]),o($Vt,[2,114]),o($Vt,[2,115]),{95:65,98:[1,66]},{9:67,34:68,35:69,39:70,40:$Vu,41:$Vv,42:$Vw},{15:9,30:74,31:$V1,32:$V2,40:$V3,41:$V4,42:$V5,52:10,54:11,56:12,58:$V6,59:$V7,84:15,86:16,89:17,92:18,93:21,94:$V8,101:$V9,102:$Va,103:$Vb,104:$Vc},o($Vd,[2,24]),{40:$V3,41:$V4,42:$V5,52:75,54:11,56:12,58:$V6,59:$V7,84:15,86:16,89:17,92:18,93:21,94:$V8,101:$V9,102:$Va,103:$Vb,104:$Vc},o($Vx,[2,35]),{40:[1,76]},{40:$V3,41:$V4,42:$V5,54:77,56:12,58:$V6,59:$V7,84:15,86:16,89:17,92:18,93:21,94:$V8,101:$V9,102:$Va,103:$Vb,104:$Vc},o($Vk,[2,51]),{40:$V3,41:$V4,42:$V5,84:78,86:16,89:17,92:18,93:21,94:$V8,101:$V9,102:$Va,103:$Vb,104:$Vc},o($Vk,[2,61]),o($Vk,[2,62]),o($Vk,[2,63]),o($Vk,[2,64]),o($Vk,[2,65]),{40:$V3,41:$V4,42:$V5,56:79,73:[1,80],74:[1,81],75:[1,82],84:15,86:16,89:17,92:18,93:21,94:$V8,101:$V9,102:$Va,103:$Vb,104:$Vc},{40:$V3,41:$V4,42:$V5,56:83,59:[1,84],77:[1,85],84:15,86:16,89:17,92:18,93:21,94:$V8,101:$V9,102:$Va,103:$Vb,104:$Vc},{42:[1,86]},{78:[1,87],82:[1,88],83:[1,89]},{40:$V3,41:$V4,42:$V5,56:90,84:15,86:16,89:17,92:18,93:21,94:$V8,101:$V9,102:$Va,103:$Vb,104:$Vc},{40:$V3,41:$V4,42:$V5,56:91,84:15,86:16,89:17,92:18,93:21,94:$V8,101:$V9,102:$Va,103:$Vb,104:$Vc},o($Vy,[2,54]),o($Vy,[2,55]),o($Vy,[2,56]),o($Vy,[2,57]),o($Vy,[2,58]),o($Vy,[2,59]),o($Vy,[2,60]),{4:92,6:$V0},o($Vk,[2,53]),{40:$V3,41:$V4,42:$V5,86:93,89:17,92:18,93:21,94:$V8,101:$V9,102:$Va,103:$Vb,104:$Vc},{40:$V3,41:$V4,42:$V5,86:94,89:17,92:18,93:21,94:$V8,101:$V9,102:$Va,103:$Vb,104:$Vc},{40:$V3,41:$V4,42:$V5,89:95,92:18,93:21,94:$V8,101:$V9,102:$Va,103:$Vb,104:$Vc},{40:$V3,41:$V4,42:$V5,89:96,92:18,93:21,94:$V8,101:$V9,102:$Va,103:$Vb,104:$Vc},{40:$V3,41:$V4,42:$V5,89:97,92:18,93:21,94:$V8,101:$V9,102:$Va,103:$Vb,104:$Vc},{15:101,31:$Vz,32:$VA,40:$V3,41:$V4,42:$V5,43:$VB,52:10,54:11,56:12,58:$V6,59:$V7,79:100,80:99,81:98,84:15,86:16,89:17,92:18,93:21,94:$V8,101:$V9,102:$Va,103:$Vb,104:$Vc},{15:101,31:$Vz,32:$VA,40:$V3,41:$V4,42:$V5,43:$VB,52:10,54:11,56:12,58:$V6,59:$V7,79:100,80:99,81:104,84:15,86:16,89:17,92:18,93:21,94:$V8,101:$V9,102:$Va,103:$Vb,104:$Vc},{43:[1,105],53:$Vh},{96:106,97:[2,110],98:[1,107],100:[1,108]},{15:109,40:$V3,41:$V4,42:$V5,52:10,54:11,56:12,58:$V6,59:$V7,84:15,86:16,89:17,92:18,93:21,94:$V8,101:$V9,102:$Va,103:$Vb,104:$Vc},o($VC,[2,3],{10:110,14:[1,112],21:[1,111]}),o($VD,[2,25],{36:113,37:$VE,45:$VF,47:$VG,48:$VH,49:$VI,50:$VJ,51:$VK}),o($VL,[2,27]),o($VM,$Ve,{33:120,40:$Vf,44:$Vg}),o($VN,[2,31]),o($VN,[2,32]),{4:121,6:$V0},o($Vd,[2,21]),o($Vi,[2,47],{55:$Vj}),o($Vx,[2,36]),o($Vk,[2,49]),o($Vm,[2,92],{87:$Vn,88:$Vo}),o($Vk,[2,66],{85:$Vl}),{42:[1,122]},{42:[1,123]},{42:[1,124]},o($Vk,[2,70],{85:$Vl}),{40:$V3,41:$V4,42:$V5,56:125,77:[1,126],84:15,86:16,89:17,92:18,93:21,94:$V8,101:$V9,102:$Va,103:$Vb,104:$Vc},{8:[1,127]},{4:128,6:$V0,15:130,17:129,40:$V3,41:$V4,42:$V5,52:10,54:11,56:12,58:$V6,59:$V7,84:15,86:16,89:17,92:18,93:21,94:$V8,101:$V9,102:$Va,103:$Vb,104:$Vc},{42:[1,131]},{40:$V3,41:$V4,42:$V5,56:132,84:15,86:16,89:17,92:18,93:21,94:$V8,101:$V9,102:$Va,103:$Vb,104:$Vc},{40:$V3,41:$V4,42:$V5,56:133,84:15,86:16,89:17,92:18,93:21,94:$V8,101:$V9,102:$Va,103:$Vb,104:$Vc},o($Vk,[2,87],{85:$Vl}),{55:[1,134],85:$Vl},{43:[1,135]},o($Vp,[2,94],{31:$Vq,90:$Vr,91:$Vs}),o($Vp,[2,95],{31:$Vq,90:$Vr,91:$Vs}),o($Vt,[2,97]),o($Vt,[2,98]),o($Vt,[2,99]),{43:[1,136]},{21:[1,137],43:[2,86]},o($VO,[2,84]),o($VO,[2,80],{53:$Vh}),o($VO,[2,81]),o($VO,[2,82]),{43:[1,138]},o($Vt,[2,104]),{97:[1,139]},{15:140,40:$V3,41:$V4,42:$V5,52:10,54:11,56:12,58:$V6,59:$V7,84:15,86:16,89:17,92:18,93:21,94:$V8,101:$V9,102:$Va,103:$Vb,104:$Vc},{15:141,40:$V3,41:$V4,42:$V5,52:10,54:11,56:12,58:$V6,59:$V7,84:15,86:16,89:17,92:18,93:21,94:$V8,101:$V9,102:$Va,103:$Vb,104:$Vc},{53:$Vh,99:[1,142]},o($VP,[2,5],{11:143,16:[1,144]}),{34:145,35:69,39:70,40:$Vu,41:$Vv,42:$Vw},{15:146,40:$V3,41:$V4,42:$V5,52:10,54:11,56:12,58:$V6,59:$V7,84:15,86:16,89:17,92:18,93:21,94:$V8,101:$V9,102:$Va,103:$Vb,104:$Vc},{37:[1,147]},{37:[2,38],46:[1,148]},{37:[2,40],46:[1,149]},{37:[2,42]},{37:[2,43]},{37:[2,44]},{37:[2,45]},o($VM,[2,30]),{43:[1,150]},{4:151,6:$V0},{4:152,6:$V0},{4:153,6:$V0},o($Vk,[2,71],{85:$Vl}),{8:[1,154]},{40:$V3,41:$V4,42:$V5,56:155,84:15,86:16,89:17,92:18,93:21,94:$V8,101:$V9,102:$Va,103:$Vb,104:$Vc},{43:[1,156]},{21:$VQ,43:[1,157]},o($VR,[2,79],{53:$Vh}),{4:159,6:$V0,15:130,17:160,40:$V3,41:$V4,42:$V5,52:10,54:11,56:12,58:$V6,59:$V7,84:15,86:16,89:17,92:18,93:21,94:$V8,101:$V9,102:$Va,103:$Vb,104:$Vc},o($Vk,[2,88],{85:$Vl}),{55:[1,161],85:$Vl},{40:$V3,41:$V4,42:$V5,56:162,84:15,86:16,89:17,92:18,93:21,94:$V8,101:$V9,102:$Va,103:$Vb,104:$Vc},o($Vk,[2,52]),o($Vt,[2,105]),{15:101,31:$Vz,32:$VA,40:$V3,41:$V4,42:$V5,52:10,54:11,56:12,58:$V6,59:$V7,79:163,84:15,86:16,89:17,92:18,93:21,94:$V8,101:$V9,102:$Va,103:$Vb,104:$Vc},o($Vt,[2,106]),o($Vt,[2,107]),{53:$Vh,99:[1,164]},{53:$Vh,97:[2,111]},{15:165,40:$V3,41:$V4,42:$V5,52:10,54:11,56:12,58:$V6,59:$V7,84:15,86:16,89:17,92:18,93:21,94:$V8,101:$V9,102:$Va,103:$Vb,104:$Vc},o($VS,[2,7],{12:166,18:[1,167]}),{15:130,17:168,40:$V3,41:$V4,42:$V5,52:10,54:11,56:12,58:$V6,59:$V7,84:15,86:16,89:17,92:18,93:21,94:$V8,101:$V9,102:$Va,103:$Vb,104:$Vc},o($VD,[2,26],{36:113,37:$VE,45:$VF,47:$VG,48:$VH,49:$VI,50:$VJ,51:$VK}),o($VC,[2,4],{53:$Vh}),{35:169,39:70,40:$Vu,41:$Vv,42:$Vw},{37:[2,39]},{37:[2,41]},o($VN,[2,33]),{43:[1,170]},{43:[1,171]},{43:[1,172]},{40:$V3,41:$V4,42:$V5,56:173,84:15,86:16,89:17,92:18,93:21,94:$V8,101:$V9,102:$Va,103:$Vb,104:$Vc},o($Vk,[2,72],{85:$Vl}),o($Vk,[2,74]),o($Vk,[2,76]),{15:174,40:$V3,41:$V4,42:$V5,52:10,54:11,56:12,58:$V6,59:$V7,84:15,86:16,89:17,92:18,93:21,94:$V8,101:$V9,102:$Va,103:$Vb,104:$Vc},{43:[1,175]},{21:$VQ,43:[1,176]},{40:$V3,41:$V4,42:$V5,56:177,84:15,86:16,89:17,92:18,93:21,94:$V8,101:$V9,102:$Va,103:$Vb,104:$Vc},o($Vk,[2,89],{85:$Vl}),o($VO,[2,83]),{15:178,40:$V3,41:$V4,42:$V5,52:10,54:11,56:12,58:$V6,59:$V7,84:15,86:16,89:17,92:18,93:21,94:$V8,101:$V9,102:$Va,103:$Vb,104:$Vc},o($VT,[2,109],{53:$Vh}),o($VU,[2,9],{13:179,19:[1,180]}),{15:181,40:$V3,41:$V4,42:$V5,52:10,54:11,56:12,58:$V6,59:$V7,84:15,86:16,89:17,92:18,93:21,94:$V8,101:$V9,102:$Va,103:$Vb,104:$Vc},o($VP,[2,6],{21:$VQ}),o($VL,[2,28],{38:[1,182]}),o($Vk,[2,67]),o($Vk,[2,68]),o($Vk,[2,69]),o($Vk,[2,73],{85:$Vl}),o($VR,[2,78],{53:$Vh}),o($Vk,[2,75]),o($Vk,[2,77]),o($Vk,[2,90],{85:$Vl}),o($VT,[2,108],{53:$Vh}),o($VU,[2,2]),{15:185,20:183,22:184,40:$V3,41:$V4,42:$V5,52:10,54:11,56:12,58:$V6,59:$V7,84:15,86:16,89:17,92:18,93:21,94:$V8,101:$V9,102:$Va,103:$Vb,104:$Vc},o($VS,[2,8],{53:$Vh}),{15:186,40:$V3,41:$V4,42:$V5,52:10,54:11,56:12,58:$V6,59:$V7,84:15,86:16,89:17,92:18,93:21,94:$V8,101:$V9,102:$Va,103:$Vb,104:$Vc},o($VU,[2,10],{21:[1,187]}),o($VV,[2,12]),o($VW,[2,14],{23:188,25:[1,189],26:[1,190],53:$Vh}),o($VL,[2,29],{53:$Vh}),{15:185,22:191,40:$V3,41:$V4,42:$V5,52:10,54:11,56:12,58:$V6,59:$V7,84:15,86:16,89:17,92:18,93:21,94:$V8,101:$V9,102:$Va,103:$Vb,104:$Vc},o($VV,[2,17],{24:192,27:[1,193]}),o($VW,[2,15]),o($VW,[2,16]),o($VV,[2,11]),o($VV,[2,13]),{28:[1,194],29:[1,195]},o($VV,[2,18]),o($VV,[2,19])],
defaultActions: {4:[2,1],116:[2,42],117:[2,43],118:[2,44],119:[2,45],148:[2,39],149:[2,41]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        function lex() {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 41
break;
case 1:return 32
break;
case 2:/* skip whitespace */
break;
case 3:return 6
break;
case 4:return 8
break;
case 5:return 14
break;
case 6:return 77
break;
case 7:return 83
break;
case 8:return 16
break;
case 9:return 18
break;
case 10:return 19
break;
case 11:return 21
break;
case 12:return 87
break;
case 13:return 88
break;
case 14:return 90
break;
case 15:return 31
break;
case 16:return 91
break;
case 17:return 61
break;
case 18:return 62
break;
case 19:return 63
break;
case 20:return 65
break;
case 21:return 64
break;
case 22:return 67
break;
case 23:return 66
break;
case 24:return 42
break;
case 25:return 43
break;
case 26:return 85
break;
case 27:return 44
break;
case 28:return 73
break;
case 29:return 74
break;
case 30:return 75
break;
case 31:return 58
break;
case 32:return 76
break;
case 33:return 78
break;
case 34:return 38
break;
case 35:return 55
break;
case 36:return 53
break;
case 37:return 59
break;
case 38:return 49
break;
case 39:return 46
break;
case 40:return 37
break;
case 41:return 45
break;
case 42:return 47
break;
case 43:return 48
break;
case 44:return 51
break;
case 45:return 50
break;
case 46:return 94
break;
case 47:return 98
break;
case 48:return 99
break;
case 49:return 100
break;
case 50:return 97
break;
case 51:return 82
break;
case 52:return 25
break;
case 53:return 26
break;
case 54:return 27
break;
case 55:return 28
break;
case 56:return 29
break;
case 57:return 101
break;
case 58:return 104
break;
case 59:return 103
break;
case 60:return 'PARAMETER'
break;
case 61:return 102
break;
case 62:return 40
break;
case 63:return 5
break;
case 64:return 'INVALID'
break;
}
},
rules: [/^(?:[a-zA-Z_][a-zA-Z0-9_]*\.[a-zA-Z_][a-zA-Z0-9_]*)/i,/^(?:[a-zA-Z_][a-zA-Z0-9_]*\.\*)/i,/^(?:\s+)/i,/^(?:SELECT\b)/i,/^(?:FROM\b)/i,/^(?:WHERE\b)/i,/^(?:DISTINCT\b)/i,/^(?:BETWEEN\b)/i,/^(?:GROUP BY\b)/i,/^(?:HAVING\b)/i,/^(?:ORDER BY\b)/i,/^(?:,)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\/)/i,/^(?:\*)/i,/^(?:%)/i,/^(?:=)/i,/^(?:!=)/i,/^(?:<>)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\|\|)/i,/^(?:AS\b)/i,/^(?:ALL\b)/i,/^(?:ANY\b)/i,/^(?:SOME\b)/i,/^(?:EXISTS\b)/i,/^(?:IS\b)/i,/^(?:IN\b)/i,/^(?:ON\b)/i,/^(?:AND\b)/i,/^(?:OR\b)/i,/^(?:NOT\b)/i,/^(?:INNER\b)/i,/^(?:OUTER\b)/i,/^(?:JOIN\b)/i,/^(?:LEFT\b)/i,/^(?:RIGHT\b)/i,/^(?:FULL\b)/i,/^(?:NATURAL\b)/i,/^(?:CROSS\b)/i,/^(?:CASE\b)/i,/^(?:WHEN\b)/i,/^(?:THEN\b)/i,/^(?:ELSE\b)/i,/^(?:END\b)/i,/^(?:LIKE\b)/i,/^(?:ASC\b)/i,/^(?:DESC\b)/i,/^(?:NULLS\b)/i,/^(?:FIRST\b)/i,/^(?:LAST\b)/i,/^(?:['](\\.|[^'])*['])/i,/^(?:NULL\b)/i,/^(?:(true|false))/i,/^(?::[a-zA-Z_][a-zA-Z0-9_]*)/i,/^(?:[0-9]+(\.[0-9]+)?)/i,/^(?:[a-zA-Z_][a-zA-Z0-9_]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}